@inject Microsoft.AspNetCore.Antiforgery.IAntiforgery Xsrf

@functions {
    public string GetAntiXsrfRequestToken()
    {
        return Xsrf.GetAndStoreTokens(Context).RequestToken;
    }
}

@{
    ViewData["Title"] = "Add Existing Product";
}

<div class="addOrSubtract-container">
    <div class="addOrSubtract-productInfo-image-container">
        <img class="addOrSubtract-productInfo-image" src="" />

        <div class="savedInDbModal-container">
            <div class="savedInDbModal-logo-container">
                <span class="material-icons savedInDbModal-logo"></span>
            </div>
            <p class="savedInDbModal-text"></p>
        </div>

@*        <div class="startScanModal-contianer">
            <img class="startScanModal-image" src="~/Images/Logoer/4329934.png" />
        </div>*@

    </div>
    
    <div class="addOrSubtract-productInfo">
        <p class="addOrSubtract-productInfo-name"></p>
    </div>

    <div class="addOrSubtract-control-container">
        <div class="addOrSubtract-search-container">
            <input type="text" class="addOrSubtract-search form-control background-light" placeholder="0000" />
        </div>
        <div class="addOrSubtract-btn-container addOrSubtract-btn-container-left invisibleWhileLoading">
            <button class="addOrSubtract-btn addOrSubtract-subtract-btn" style="background-color: #dc3545 !important;">-</button>
        </div>
        <div class="addOrSubtract-input-contianer invisibleWhileLoading">
            <input class="addOrSubtract-input form-control background-light" type="number" value="0" />
        </div>
        <div class="addOrSubtract-btn-container addOrSubtract-btn-container-right invisibleWhileLoading">
            <button class="addOrSubtract-btn addOrSubtract-add-btn" style="background-color: #1a9c23 !important;">+</button>
        </div>
        <div class="clearBoth"></div>
        <div class="addOrSubtract-save-btn-container invisibleWhileLoading">
            <a class="addOrSubtract-btn addOrSubtract-save-btn">Save</a>
        </div>
        <div class="loader"></div>
    </div>
</div>

    <h2 class="text-danger errorMsg" style="text-align: center;"></h2>

<p style="text-align: center;">Husk at fixe så stregkoden ikke bliver sat ind quantity input feltet hvis det er i focus</p>
<p style="text-align: center;">Tjek om det som står i quantity input kun er tal</p>
<p style="text-align: center;">Gør så man kan lave en manual søgning</p>
@*
<h2 style="text-align: center;">Når man scanner efter at have tilføjet noget i inputfeltet så sætter den focus på knappet og tilføjer for hvergang man scanner</h2>
*@

@section Scripts {
@*    <script src="~/js/AddOrSubtract.js"></script>*@

<script>
// Barcode scanner variables
let barcode = '';
let lastScannedBarcode = '';
var currentBarcode = '';
var productExist = false;
let interval;

// Add Or Subtract control variables
const addBtn = $(".addOrSubtract-add-btn");
const subtractBtn = $(".addOrSubtract-subtract-btn");
const quantityInputField = $(".addOrSubtract-input");
let inputValue = 0;

const barcodeInputField = $(".addOrSubtract-search");
const updateProductBtn = $(".addOrSubtract-save-btn");

const functionControls = $(".invisibleWhileLoading");
const loader = $(".loader");

const productInfoImageContainer = $(".addOrSubtract-productInfo-image-container");
const productInfoImage = $(".addOrSubtract-productInfo-image");

const errorMsg = $(".errorMsg");

// Save product modal variables
const savedProductModalContainer = $(".savedInDbModal-container");
const savedProductModalIcon = $(".savedInDbModal-logo");
const savedProductModalText = $(".savedInDbModal-text");

var red = "#dc3545";
var yellow = "#ffc107";
var green = "#28a745";

let ajaxResult = false;

// ---Btn click events an functions

addBtn.click(function () {
    InputFunction("+")
});

subtractBtn.click(function () {
    InputFunction("-");
});

function InputFunction(addOrSubtract) {

    if (quantityInputField.val() < 0) {
        quantityInputField.val(0);
    }

    inputValue = quantityInputField.val();

    if (addOrSubtract == "+") {
        quantityInputField.val(inputValue++ + 1);
    }

    if (addOrSubtract == "-") {
        if (inputValue != 0) {
            quantityInputField.val(inputValue-- - 1);
        }
    }
}

// ###

// ---Save btn
// Sends a post request to the backend
updateProductBtn.click(function () {
    SaveModalFunction("none","","","");

    if (barcodeInputField.val().trim().length == 0) {
        errorMsg.text("You need to scan a product");
        return;
    }

    if (productExist == false) {
        errorMsg.text("The product dosent exist");
        return;
    }

    if (quantityInputField.val() == '0') {
        errorMsg.text("You need to add more than 0 products");
        return;
    }
     //console.log("Save");
     ajaxPost();
});

// ###

// ---Scanner event and functions
document.addEventListener("keydown", function (evt) {
    if (interval) {
        clearInterval(interval);
    }
    // if input is enter
    if (evt.code.includes("Enter")) {
        if (barcode) {
            handleBarcode(barcode);
            barcode = '';

            addBtn.blur();
            subtractBtn.blur();

            return;
        }
    }
    if (!evt.code.includes("Shift") && !evt.code.includes("CapsLock")) {
        barcode += evt.key;
    }
    interval = setInterval(() => barcode = '', 20);
});

function handleBarcode(scanned_barcode) {
    scanned_barcode = scanned_barcode.trim();
    SaveModalFunction("none","","","");

    if (scanned_barcode.length >= 1) {
        errorMsg.text("");
        if (scanned_barcode != lastScannedBarcode) {

            loadingTimeout();
            currentBarcode = scanned_barcode;
            lastScannedBarcode = scanned_barcode;
            barcodeInputField.val(scanned_barcode);
            ajaxGet(scanned_barcode);
        }
        else {
            if (productExist) {
                InputFunction("+")
            }
        }
    }
}

// ###

// ---Timeout/delay functions
function loadingTimeout() {
    setTimeout(function () {
        if (ajaxResult == false) {
            functionControls.css("display", "none");
            loader.css("display", "block");
        }
    }, 20);
}

// ###

// ---Output data to html functions
function AppendData(productData) {
    if (productData.image != null) {
        productInfoImageContainer.css("display", "block");
        productInfoImage.attr("src", "/Images/Products/" + productData.image);
        $(".addOrSubtract-productInfo-name").text(productData.name);
    }
    else {
        productInfoImageContainer.css("display", "none");
        productInfoImage.attr("src", "");
        $(".addOrSubtract-productInfo-name").text("");
    }
}

// ###

// ---Ajax functions
// Gets the scanned product
function ajaxGet(scanned_barcode) {
    $.ajax({
        type: "GET",
        url: "/Scanner/GetProduct",
        data: { productID: scanned_barcode },
        dataType: "json",
        success: function (productData) {
            ajaxResult = true;
            loader.css("display", "none");
            functionControls.css("display", "block");

            if (productData != false) {
                productExist = true;
                AppendData(productData);

                barcodeInputField.val(scanned_barcode);
                quantityInputField.val("1");
            }
            else {
                productExist = false;
                barcodeInputField.val("");
                quantityInputField.val("0");

                productInfoImageContainer.css("display", "none");
                productInfoImage.attr("src", "");
                $(".addOrSubtract-productInfo-name").text("");
            }
        },
        error: function (req, status, error) {
            console.log(status);
            SaveModalFunction("block", "warning_amber", yellow, "CONTACT SUPPORT");
        }
    });
}

// Post the scanned product and updates the producs quantity
function ajaxPost() {
    $.ajax({
        type: "POST",
        url: "/Scanner/AddMoreStock",
        headers: { "RequestVerificationToken": "@GetAntiXsrfRequestToken()" },
        data: { quantity: quantityInputField.val(), productID: currentBarcode },
        success: function (result) {
            quantityInputField.val('0');
            if (result.boolean == true) {

                SaveModalFunction("block", "check_circle_outline", green, result.msg);
            }
            else {
                if (result.exception == true) {
                    SaveModalFunction("block", "warning_amber", yellow, result.msg);
                }
                else {
                    SaveModalFunction("block", "error_outline", red, result.msg);
                }
            }
        },
        error: function (req, status, error) {
            console.log(status);
            SaveModalFunction("block", "warning_amber", yellow, "CONTACT SUPPORT");
        }
    });
}

// ###

// if true:  Icon: check_circle_outline   Text: The products has been added!                                  Color: Green
// if false: Icon: error_outline          Text: No product with the scanned barcode was found                 Color: Red
// if error: Icon: warning_amber          Text: An database error has occurred, try again or contact support  Color: Yellow

function SaveModalFunction(displayStyle, icon, iconColor, message) {
    savedProductModalContainer.css("display", displayStyle);
    savedProductModalIcon.css("color", iconColor);
    savedProductModalIcon.text(icon);
    savedProductModalText.text(message);
}

</script>
}