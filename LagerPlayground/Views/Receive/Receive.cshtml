@model LagerPlayground.Models.ReceivingOrder_Details
@inject Microsoft.AspNetCore.Antiforgery.IAntiforgery Xsrf

@functions {
    public string GetAntiXsrfRequestToken()
    {
        return Xsrf.GetAndStoreTokens(Context).RequestToken;
    }
}

@{
    ViewData["Title"] = "Receive";
}

<h2>Receive</h2>

<div class="receive-top-overall-container">
    <div class="receive-top-container">
        <p class="trim receive-top-container-text">Unreceived</p>
        <div class="receive-top-progressbar-container">
            <div class="receive-top-progressbar"></div>
            <p class="trim receive-top-numbers"><span class="receive-top-numbers-received">@ViewData["allAcceptedProducts"]</span>/<span class="receive-top-numbers-unreceived">@ViewData["AllOrderedProducts"]</span></p>
        </div>
    </div>
    <div class="receive-top-container">
        <div class="receive-top-btns-overall-container">
            <div class="receive-top-btns-container">
                <a class="receive-top-btns-save" asp-action="">Save</a>
            </div>
            <div class="receive-top-btns-container">
                <a class="receive-top-btns-back" asp-controller="Warehouse" asp-action="ReceiveOrderDetails" asp-route-id="@Model.ID">Back to Receive Order</a>
            </div>
            <div class="clearBoth"></div>
        </div>
    </div>
</div>

<table class="table receive-table w-auto">
    <thead>
        <tr>
            <th class="receive-first" style="width: 350px;">Product</th>
            <th>Unreceived</th>
            <th>Rejected</th>
            <th>Accepted</th>
            <th class="receive-last">Activity</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var item in Model.ReceivingOrder_Items)
        {
            <tr class="receive-table-tbody-tr" data-barcode="@item.Product.BarcodeID" data-receivingorderitemid="@item.ID">
                <td class="receive-first">
                    <div class="receive-table-product-overall-container">
                        <div class="receive-table-product-image-container">
                            <img src="~/Images/@(item.Product.Image == null ? "Placeholders/Placeholder.jpg" : "Products/" + item.Product.Image)" />
                        </div>
                        <div class="receive-table-product-info-container">
                            <p class="trim">@item.Product.Name</p>
                            <p class="trim"><span class="receive-table-product-info-sku">SKU: </span>@item.Product.BarcodeID</p>
                        </div>
                    </div>
                </td>
                <td><p class="receive-table-unreceived trim">@item.Unreceived</p></td>
                <td class="receive-table-rejected-info-td">
                    <a class="receive-table-rejected-info-container">
                        <p class="receive-table-rejected trim">@item.Rejected</p>
                        <span class="receive-table-rejected-span">Edit</span>
                    </a>
                </td>
                <td><input type="number" value="@item.Accepted" class="form-control background-dark receive-accepted-input" style="width: 120px !important;" /></td>
                <td class="receive-last">
                    <div class="receive-table-activity-overall-container">
                        <div class="receive-table-activity-info-container">
                            <p class="trim">Rejected</p>
                            <p class="receive-table-activity-info-quantity receive-table-rejected trim">@item.Rejected</p>
                        </div>
                        <div class="receive-table-activity-info-container receive-table-activity-info-container-padding">
                            <p class="trim">Unreceived</p>
                            <p class="receive-table-activity-info-quantity receive-table-unreceived trim">@item.Unreceived</p>
                        </div>
                        <div class="receive-table-activity-info-container">
                            <p class="trim">Accepted</p>
                            <p class="receive-table-activity-info-quantity receive-table-accepted trim">@item.Accepted</p>
                        </div>
                    </div>
                    <div class="receive-table-activity-info-progress"></div>
                    <p class="receive-table-activity-info-ordered-text receive-table-ordered trim" data-ordered="@item.Quantity">Ordered: @item.Quantity</p>
                </td>
            </tr>
        }
    </tbody>
</table>

@section Scripts {
<script>
    // https://procentregner.dk/

    let acceptedInput = $(".receive-accepted-input");
    let tbodyTr = $(".receive-table-tbody-tr");

    let receiveProgressBar = $(".receive-table-activity-info-progress");

    let acceptedInputValue = 0;

    let unreceivedPTag = $(".receive-table-unreceived");
    let rejectedPTag = $(".receive-table-rejected");
    let acceptedPTag = $(".receive-table-accepted");
    let orderedPTag = $(".receive-table-ordered");

    let receivedTopNumbers = $(".receive-top-numbers-received");
    let unreceivedTopNumbers = $(".receive-top-numbers-unreceived");
    let receiveTopProgressBar = $(".receive-top-progressbar");

    // Reject variables
    let openRejectModalBtn = $(".receive-table-rejected-span");

    // Loading variabler
    let loader = $(".loader");
    let loadingIsRunning = false;

    let currentScannedBarcode;
    let lastScannedBarcode;
    let currentBarcodeArray = [];

    // Scanner variabler
    let barcode = '';
    let interval;

    $(document).ready(function () {
        ReceiveTopProgressBarFunction();
        tbodyTr.each(function(index) {
            $(this).find(unreceivedPTag).html($(this).find(unreceivedPTag).html() - $(this).find(rejectedPTag).html());
            ReceiveProgressBarFunction($(this));
        });
    });

    function ReceiveProgressBarFunction(thisElement) {
        //Grøn: #1a9c23
        //Gul: #ffc107
        //Rød: #dc3545
        //background: linear-gradient(to left, #1a9c23 0%, #1a9c23 33.333%, #ffc107 33.333%, #ffc107 67.333%, #dc3545 67.333%, #dc3545 100%);

        let getUnreceivedNumber = thisElement.find(unreceivedPTag).html();
        let getAcceptedNumber = thisElement.find(acceptedPTag).html();
        let getRejectedNumber = thisElement.find(rejectedPTag).html();

        if (getAcceptedNumber == 0 && getRejectedNumber == 0) {
            thisElement.find(receiveProgressBar).css( { background : "linear-gradient(to left, #ffc107 0%, #ffc107 100%)" } );
        }
        else if(getRejectedNumber != 0) {
            let percentageUnreceived = getUnreceivedNumber / thisElement.find(orderedPTag).data("ordered") * 100;
            let percentageRejected = getRejectedNumber / thisElement.find(orderedPTag).data("ordered") * 100;
            let percentage = percentageUnreceived + percentageRejected;
            thisElement.find(receiveProgressBar).css( { background : "linear-gradient(to right, #dc3545 0%, #dc3545 " + percentageRejected + "%, #ffc107 " + percentageRejected + "%, #ffc107 " + percentage + "%, #1a9c23 " + percentage + "%, #1a9c23 100%)" });
        }
        else {
            let percentageAccepted = getAcceptedNumber / thisElement.find(orderedPTag).data("ordered") * 100;
            thisElement.find(receiveProgressBar).css( { background : "linear-gradient(to left, #1a9c23 0%, #1a9c23 " + percentageAccepted + "%, #ffc107 " + percentageAccepted + "%, #ffc107 100%)" } );
            //if(percentageAccepted == 100) {
            //    thisElement.find(receiveProgressBar).css( { background : "linear-gradient(to left, #1a9c23 0%, #1a9c23 100%)" } );
            //}
            //else {
            //    thisElement.find(receiveProgressBar).css( { background : "linear-gradient(to left, #1a9c23 0%, #1a9c23 " + percentageAccepted + "%, #ffc107 " + percentageAccepted + "%, #ffc107 100%)" } );
            //}
        }
    }

    acceptedInput.on("input", function () {
        if(acceptedInput.val() < 0 || acceptedInput.val().startsWith("0")) {
            acceptedInput.val("0");
            console.log("Test");
        }
    });

    // Timeout/delay functions
    function loadingTimeout() {
        setTimeout(function () {
                loadingIsRunning = true;
                //loader.css("display", "block");
        }, 20);
    }

    // Scanner event and functions
    document.addEventListener("keydown", function (evt) {
        if (interval) {
            clearInterval(interval);
        }

        if (evt.code.includes("Enter")) {
            if (barcode) {
                handleBarcode(barcode);
                //if (loadingIsRunning == false)  {
                //    handleBarcode(barcode);
                //}
                barcode = '';

                return;
            }
        }
        if (!evt.code.includes("Shift") && !evt.code.includes("CapsLock")) {
            barcode += evt.key;
        }
        interval = setInterval(() => barcode = '', 20);
    });

    function handleBarcode(scanned_barcode) {
        scanned_barcode = scanned_barcode.trim();

        if (scanned_barcode.length >= 1) {

            if (scanned_barcode != currentScannedBarcode) {
                lastScannedBarcode = currentScannedBarcode;
                currentScannedBarcode = scanned_barcode;
                for (var i = 0; i < currentBarcodeArray.length; i++) {
                    console.log(currentBarcodeArray[i]);
                }
            }

            currentBarcodeArray.push(scanned_barcode);
            console.log("T");

            console.log("Y");
            //loadingTimeout();
            FindProduct(scanned_barcode);
        }
    }

    function FindProduct(scanned_barcode) {
        tbodyTr.each(function(index) {
            if($(this).data("barcode") == scanned_barcode) {

                if(scanned_barcode != lastScannedBarcode) {
                    tbodyTr.removeClass("receive-table-tbody-tr-active");
                }

                AddProductDatabase(scanned_barcode, $(this).data("receivingorderitemid"), $(this));
            }
        });
    }

    function AddProduct(thisElement) {

        thisElement.addClass("receive-table-tbody-tr-active");

        acceptedInputValue = thisElement.find(".receive-accepted-input").val();
        thisElement.find(".receive-accepted-input").val(acceptedInputValue++ + 1);

        thisElement.find(unreceivedPTag).text(function(i,v) {
            let getNumber = parseInt(v);
            if(getNumber > 0) {
                let result = getNumber - 1;
                return result;
            }
            return;
        });

        thisElement.find(acceptedPTag).text(function(i,v) {
            let getNumber = parseInt(v);
            let result = getNumber + 1;

            return result;
        });

        ReceiveProgressBarFunction(thisElement);

        // Receive Top Progress.
        receivedTopNumbers.text(function(i,v) {
            let getNumber = parseInt(v);
            let result = getNumber + 1;
            return result;
        });

        ReceiveTopProgressBarFunction();

        return;
    }

    function ReceiveTopProgressBarFunction() {
        let getUnreceivedTopNumbers = unreceivedTopNumbers.html();
        let getReceivedTopNumbers = receivedTopNumbers.html();

        if (getReceivedTopNumbers == 0) {
            receiveTopProgressBar.css( { background : "linear-gradient(to left, #ffc107 0%, #ffc107 100%)" } );
        }
        else {
            let percentageAccepted = getReceivedTopNumbers / getUnreceivedTopNumbers * 100;
            receiveTopProgressBar.css( { background : "linear-gradient(to left, #1a9c23 0%, #1a9c23 " + percentageAccepted + "%, #ffc107 " + percentageAccepted + "%, #ffc107 100%)" } );
        }
    }

    function AddProductDatabase(scanned_barcode, receivingItemId, thisElement) {

        let ajaxResult;

        $.ajax({
            type: "POST",
            url: "/Receive/AddProduct",
            headers: {"RequestVerificationToken": "@GetAntiXsrfRequestToken()"},
            data: { barcode: scanned_barcode, receivingItemID: receivingItemId },
            success: function (result) {
                if(result.boolean == true) {
                    AddProduct(thisElement);
                }
                else {
                    console.log(result.msg);
                }
            },
            error: function (req, status, error) {
                console.log(status);
            }
        });
    }

    // Reject

    openRejectModalBtn.click(function () {
        console.log("Open Modal");
    });
</script>
}