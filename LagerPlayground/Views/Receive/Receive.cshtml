@*@model LagerPlayground.Models.ReceivingOrder_Details*@
@model LagerPlayground.Models.VM.ReceiveSite
@inject Microsoft.AspNetCore.Antiforgery.IAntiforgery Xsrf

@functions {
    public string GetAntiXsrfRequestToken()
    {
        return Xsrf.GetAndStoreTokens(Context).RequestToken;
    }
}

@{
    ViewData["Title"] = "Receive";
}

<div class="receive-top-overall-container">
    <h2>Receive</h2>
    <div class="receive-top-overall-flex-container">
        <div class="receive-top-container">
            <p class="trim receive-top-container-text">Unreceived</p>
            <div class="receive-top-progressbar-container">
                <div class="receive-top-progressbar"></div>
                <p class="trim receive-top-numbers"><span class="receive-top-numbers-received">@ViewData["allAcceptedProducts"]</span>/<span class="receive-top-numbers-unreceived">@ViewData["AllOrderedProducts"]</span></p>
            </div>
        </div>
        <div class="receive-top-container">
            <div class="receive-top-btns-overall-container">
                <div class="receive-top-btns-container">
                    <a class="receive-top-btns-save" asp-action="">Save</a>
                </div>
                <div class="receive-top-btns-container">
                    <a class="receive-top-btns-back" asp-controller="Warehouse" asp-action="ReceiveOrderDetails" asp-route-id="@Model.ReceivingOrder_Details.ID">Back to Receive Order</a>
                </div>
                <div class="clearBoth"></div>
            </div>
        </div>
    </div>

    @*---Alert---*@
@*    <div class="alertpopup-small-overall-container">
        <div class="alertpopup-small-icon-container">
            <span class="material-icons alertpopup-small-icon">error_outline</span>
        </div>
        <div class="alertpopup-small-info-overall-container">
            <div class="alertpopup-small-info-container">
                <p class="trim alertpopup-small-info-header">NULL</p>
                <p class="trim alertpopup-small-info">NULL</p>
            </div>
            <div class="alertpopup-small-info-countdown-overall-container">
                <div class="alertpopup-small-info-countdown-container">
                    <p class="trim alertpopup-small-info-countdown-text">NULL</p>
                </div>
            </div>
            <div class="clearBoth"></div>
        </div>
        <div class="clearBoth"></div>
    </div>*@

</div>

<table class="table receive-table w-auto">
    <thead>
        <tr>
            <th class="receive-first" style="width: 350px;">Product</th>
            <th>Location</th>
            <th>Unreceived</th>
            <th>Rejected</th>
            <th>Accepted</th>
            <th class="receive-last">Activity</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var item in Model.ReceivingOrder_Details.ReceivingOrder_Items)
        {
            <tr class="receive-table-tbody-tr" data-barcode="@item.Product.BarcodeID" data-receivingorderitemid="@item.ID">
                <td class="receive-first">
                    <div class="receive-table-product-overall-container">
                        <div class="receive-table-product-image-container">
                            <img src="~/Images/@(item.Product.Image == null ? "Placeholders/Placeholder.jpg" : "Products/" + item.Product.Image)" />
                        </div>
                        <div class="receive-table-product-info-container">
                            <p class="trim">@item.Product.Name</p>
                            <p class="trim"><span class="receive-table-product-info-sku">SKU: </span>@item.Product.BarcodeID</p>
                        </div>
                    </div>
                </td>
                <td><p class="trim">Receiving</p></td>
                <td><p class="receive-table-unreceived trim">@item.Unreceived</p></td>
                <td class="receive-table-rejected-info-td">
                    <a class="receive-table-rejected-info-container">
                        <p class="receive-table-rejected trim">@item.Rejected</p>
                        <span class="receive-table-rejected-span">Edit</span>
                    </a>
                </td>
                <td><input type="number" value="@item.Accepted" class="form-control background-dark receive-accepted-input" style="width: 120px !important;" /></td>
                <td class="receive-last">
                    <div class="receive-table-activity-overall-container">
                        <div class="receive-table-activity-info-container">
                            <p class="trim">Rejected</p>
                            <p class="receive-table-activity-info-quantity receive-table-rejected trim">@item.Rejected</p>
                        </div>
                        <div class="receive-table-activity-info-container receive-table-activity-info-container-padding">
                            <p class="trim">Unreceived</p>
                            <p class="receive-table-activity-info-quantity receive-table-unreceived trim">@item.Unreceived</p>
                        </div>
                        <div class="receive-table-activity-info-container">
                            <p class="trim">Accepted</p>
                            <p class="receive-table-activity-info-quantity receive-table-accepted trim">@item.Accepted</p>
                        </div>
                    </div>
                    <div class="receive-table-activity-info-progress"></div>
                    <p class="receive-table-activity-info-ordered-text receive-table-ordered trim" data-ordered="@item.Quantity">Ordered: @item.Quantity</p>
                </td>
            </tr>
        }
    </tbody>
</table>



@*---Reject Modal---*@

<div class="receive-rejectmodal-overlay-container">
    <div class="receive-rejectmodal-overall-container">
        <div class="receive-rejectmodal-header-overall-container">
            <div class="receive-rejectmodal-header-container">
                <p class="trim">Rejected</p>
            </div>
            <div class="receive-rejectmodal-header-container">
                <span class="material-icons receive-rejectmodal-close-btn receive-rejectmodal-close">close</span>
            </div>
            <div class="clearBoth"></div>

            <div class="receive-rejectmodalloading-container" style="padding: 220px 0;">
                <div class="receive-rejectmodalloading-loading"></div>
            </div>
        </div>

        <div class="receive-rejectmodal-alert-container" style="margin-top: 8px;"></div>

        <div class="receive-rejectmodal-overall-content-container">
            <div class="receive-rejectmodal-header-overall-container">
                <div class="receive-rejectmodal-product-info-overall-container">
                    <div class="receive-rejectmodal-product-info-container">
                        <div class="receive-rejectmodal-product-info-image-container">
                            <img class="receive-rejectmodal-product-info-image" src="~/Images/Placeholders/Placeholder.jpg" />
                        </div>
                        <div class="receive-rejectmodal-product-info-detail-container">
                            <p class="trim receive-rejectmodal-product-info-name">NULL</p>
                            <p class="trim"><span class="receive-table-product-info-sku">SKU: </span><span class="receive-rejectmodal-product-info-sku">NULL</span></p>
                        </div>
                    </div>
                    <div class="receive-rejectmodal-rejected-info-container">
                        <p class="trim">Total Rejected</p>
                        <p class="trim receive-rejectmodal-rejected-number">0</p>
                    </div>
                    <div class="clearBoth"></div>
                </div>
            </div>

            <div class="receive-rejectmodal-table-container">
                <table class="table receive-rejectmodal-table">
                    <thead>
                        <tr style="border-bottom: 1px solid #454545 !important;">
                            <td>Qty</td>
                            <td>Reason</td>
                            <td>Note</td>
                            <td></td>
                        </tr>
                    </thead>
                    <tbody>
                        <tr>
                            <td>
                                <input class="receive-rejectmodal-table-numberInput background-dark" type="number" />
                                <p class="receive-rejectmodal-table-numberInput-error trim" style="padding-top: 2px !important; color: #dc3545 !important;"></p>
                            </td>
                            <td>
                                <select class="receive-rejectmodal-table-select background-dark">
                                    <option disabled selected data-reasonid="none">Select One</option>
                                    @foreach (var item in Model.ReceiveRejectedReasons)
                                    {
                                        <option data-reasonid="@item.ID">@item.Reason</option>
                                    }
                                </select>
                                <p class="receive-rejectmodal-table-select-error trim" style="padding-top: 2px !important; color: #dc3545 !important;"></p>
                            </td>
                            <td><input class="receive-rejectmodal-table-create-note background-dark" type="text" /></td>
                            <td><button class="receive-rejectmodal-table-add-btn">Add</button></td>
                        </tr>
                    </tbody>
                </table>
            </div>
            <div class="receive-rejectmodal-allreasons-container">

                <div class="receive-rejectmodalloading-rejectadd-container">
                    <div class="receive-rejectmodalloading-loading receive-rejectmodalloading-rejectadd"></div>
                </div>

                <table class="table receive-rejectmodal-table" style="border: none !important;">
                    <tbody class="receive-rejectmodal-table-tbody-output" style="border: none !important;">
                    </tbody>
                </table>
            </div>
            <div class="receive-rejectmodal-closebtn-container">
                <a class="receive-rejectmodal-close">Close</a>
            </div>
        </div>
    </div>
</div>

<div class="fullscreenloading-overall-overlay-container">
    <div class="fullscreenloading-overlay-container">
        <div class="fullscreenloading-overlay-loading"></div>
        <p class="trim">Loading...</p>
    </div>
</div>

@section Scripts {
<script>
    // https://procentregner.dk/

    let acceptedInput = $(".receive-accepted-input");
    let tbodyTr = $(".receive-table-tbody-tr");

    let receiveProgressBar = $(".receive-table-activity-info-progress");

    let acceptedInputValue = 0;

    let unreceivedPTag = $(".receive-table-unreceived");
    let rejectedPTag = $(".receive-table-rejected");
    let acceptedPTag = $(".receive-table-accepted");
    let orderedPTag = $(".receive-table-ordered");

    let receivedTopNumbers = $(".receive-top-numbers-received");
    let unreceivedTopNumbers = $(".receive-top-numbers-unreceived");
    let receiveTopProgressBar = $(".receive-top-progressbar");

    // Reject variables
    let openRejectModalBtn = $(".receive-table-rejected-span");
    let closeRejectModalBtn = $(".receive-rejectmodal-close");
    let overlayRejectModal = $(".receive-rejectmodal-overlay-container");

    let imageRejectedModal = $(".receive-rejectmodal-product-info-image");
    let nameRejectedModal = $(".receive-rejectmodal-product-info-name");
    let skuRejectedModal = $(".receive-rejectmodal-product-info-sku");
    let numberRejectedModal = $(".receive-rejectmodal-rejected-number");

    let quantityRejectModalInput = $(".receive-rejectmodal-table-numberInput");
    let selectRejectModalInput =  $(".receive-rejectmodal-table-select");
    let noteRejectModalInput = $(".receive-rejectmodal-table-create-note");
    let addRejectModalBtn = $(".receive-rejectmodal-table-add-btn");

    let quantityErrorRejectModalText = $(".receive-rejectmodal-table-numberInput-error");
    let selectedErrorRejectModalText = $(".receive-rejectmodal-table-select-error");

    // Popup Alert
    let popupAlertSmall = $(".alertpopup-small-overall-container");
    let popupAlertSmallIcon = $(".alertpopup-small-icon");
    let popupAlertSmallBarcodeHeadline = $(".alertpopup-small-info-header");
    let popupAlertSmallBarcodeText = $(".alertpopup-small-info");
    //let popupAlertSmallNumberCountdown = $(".alertpopup-small-info-countdown-text");
    //let popupAlertSmallTimeout;
    //let popupAlertSmallCountdownInterval;

    // Loading variabler
    let barcodescannerLoadingOverlay = $(".fullscreenloading-overall-overlay-container");
    let loadingIsRunning = false;
    let loadingTimeoutBarcodeScanner;

    // Loading Reject Modal
    let loadingTimeoutRejectModal;
    let loadingTimeoutRejectAddModal;
    let rejectModalLoadingContainer = $(".receive-rejectmodalloading-container");
    let rejectModalMainContent = $(".receive-rejectmodal-overall-content-container");
    let rejectModalAddLoadingContainer = $(".receive-rejectmodalloading-rejectadd-container");

    let currentBarcode;
    let currentreceiveOrderItemID;

    let currentScannedBarcode;
    let lastScannedBarcode;
    let currentBarcodeArray = [];

    // Scanner variabler
    let barcode = '';
    let interval;

    $(document).ready(function () {
        ReceiveTopProgressBarFunction();
        tbodyTr.each(function(index) {
            ReceiveProgressBarFunction($(this));
        });
    });

    // Scanner event and functions
    document.addEventListener("keydown", function (evt) {
        if (interval) {
            clearInterval(interval);
        }

        if (evt.code.includes("Enter")) {
            if (barcode) {
                if (loadingIsRunning == false)  {
                    handleBarcode(barcode);
                }
                barcode = '';

                return;
            }
        }
        if (!evt.code.includes("Shift") && !evt.code.includes("CapsLock")) {
            barcode += evt.key;
        }
        interval = setInterval(() => barcode = '', 20);
    });

    function handleBarcode(scanned_barcode) {
        scanned_barcode = scanned_barcode.trim();

        if (overlayRejectModal.css("display") == "block") {
            return;
        }

        if (scanned_barcode.length >= 1) {
            RemoveAlertPopupFunction();

            loadingTimeoutBarcodeScanner = setTimeout(function () {
                loadingIsRunning = true;
                barcodescannerLoadingOverlay.css("display", "block");
            }, 20);

            //if (scanned_barcode == currentScannedBarcode || currentScannedBarcode == null) {
            //    console.log("Test");
            //    currentBarcodeArray.push(scanned_barcode);
            //}
            //else {
            //    console.log(currentBarcodeArray);
            //}

            lastScannedBarcode = currentScannedBarcode;
            currentScannedBarcode = scanned_barcode;

            FindProduct(scanned_barcode);
        }
    }

    acceptedInput.on("input", function () {
        if(acceptedInput.val() < 0 || acceptedInput.val().startsWith("0")) {
            acceptedInput.val("0");
            console.log("Test");
        }
    });

    function FindProduct(scanned_barcode) {
        let productFound = false;
        tbodyTr.each(function(index) {
            if($(this).data("barcode") == scanned_barcode) {

                if(scanned_barcode != lastScannedBarcode)
                    tbodyTr.removeClass("receive-table-tbody-tr-active");

                productFound = true;
                AddProductDatabase(scanned_barcode, $(this).data("receivingorderitemid"), $(this));
                return;
            }
        });

        if (productFound == false) {
            tbodyTr.removeClass("receive-table-tbody-tr-active");
            ClearLoadingTimeout();

            AlertPopup($(".receive-top-overall-container"), "Product not found!" ,"There was no product that matched barcode " + scanned_barcode);
        }
    }

    function AlertPopup(htmlClass, headline , msg, databaseError = false) {
        popupAlertSmallBarcodeHeadline.text(headline);
        popupAlertSmallBarcodeText.text(msg);

        if (databaseError == true) {
            popupAlertSmall.css("backgroundColor", "#ffcc00");
            popupAlertSmallIcon.attr("style", "color: black !important");
            popupAlertSmallBarcodeHeadline.attr("style", "color: black !important");
            popupAlertSmallBarcodeText.attr("style", "color: black !important");
        }
        else {
            popupAlertSmall.css("backgroundColor", "#D0342C");
            popupAlertSmallIcon.attr("style", "color: white !important");
            popupAlertSmallBarcodeHeadline.attr("style", "color: white !important");
            popupAlertSmallBarcodeText.attr("style", "color: white !important");
        }

        popupAlertSmall.css("display", "block");
        AddAlertPopupFunction(htmlClass, headline, msg);
    }

    function AddAlertPopupFunction(htmlClass, headline, msg) {
        htmlClass.append(
            `
            <div class="alertpopup-small-overall-container">
                <div class="alertpopup-small-icon-container">
                    <span class="material-icons alertpopup-small-icon">error_outline</span>
                </div>
                <div class="alertpopup-small-info-overall-container">
                    <div class="alertpopup-small-info-container">
                        <p class="trim alertpopup-small-info-header">${headline}</p>
                        <p class="trim alertpopup-small-info">${msg}</p>
                    </div>
                    <div class="alertpopup-small-info-countdown-overall-container">
                    </div>
                    <div class="clearBoth"></div>
                </div>
                <div class="clearBoth"></div>
            </div>
            `
        );
    }

    function RemoveAlertPopupFunction() {
        $(".alertpopup-small-overall-container").remove();
    }

    function AddProduct(thisElement) {

        thisElement.addClass("receive-table-tbody-tr-active");

        acceptedInputValue = thisElement.find(".receive-accepted-input").val();
        thisElement.find(".receive-accepted-input").val(acceptedInputValue++ + 1);

        thisElement.find(unreceivedPTag).text(function(i,v) {
            let getNumber = parseInt(v);
            if(getNumber > 0) {
                let result = getNumber - 1;
                return result;
            }
            return;
        });

        thisElement.find(acceptedPTag).text(function(i,v) {
            let getNumber = parseInt(v);
            let result = getNumber + 1;

            return result;
        });

        ReceiveProgressBarFunction(thisElement);

        // Receive Top Progress.
        receivedTopNumbers.text(function(i,v) {
            let getNumber = parseInt(v);
            let result = getNumber + 1;
            return result;
        });

        ReceiveTopProgressBarFunction();
        return;
    }

    function ReceiveProgressBarFunction(thisElement) {
        //Grøn: #1a9c23
        //Gul: #ffc107
        //Rød: #dc3545
        //background: linear-gradient(to left, #1a9c23 0%, #1a9c23 33.333%, #ffc107 33.333%, #ffc107 67.333%, #dc3545 67.333%, #dc3545 100%);

        let getUnreceivedNumber = thisElement.find(unreceivedPTag).html();
        let getAcceptedNumber = thisElement.find(acceptedPTag).html();
        let getRejectedNumber = thisElement.find(rejectedPTag).html();

        if (getAcceptedNumber == 0 && getRejectedNumber == 0) {
            thisElement.find(receiveProgressBar).css( { background : "linear-gradient(to left, #ffc107 0%, #ffc107 100%)" } );
        }
        else if(getRejectedNumber != 0) {
            let percentageUnreceived = getUnreceivedNumber / thisElement.find(orderedPTag).data("ordered") * 100;
            let percentageRejected = getRejectedNumber / thisElement.find(orderedPTag).data("ordered") * 100;
            let percentage = percentageUnreceived + percentageRejected;
            thisElement.find(receiveProgressBar).css( { background : "linear-gradient(to right, #dc3545 0%, #dc3545 " + percentageRejected + "%, #ffc107 " + percentageRejected + "%, #ffc107 " + percentage + "%, #1a9c23 " + percentage + "%, #1a9c23 100%)" });
        }
        else {
            let percentageAccepted = getAcceptedNumber / thisElement.find(orderedPTag).data("ordered") * 100;
            thisElement.find(receiveProgressBar).css( { background : "linear-gradient(to left, #1a9c23 0%, #1a9c23 " + percentageAccepted + "%, #ffc107 " + percentageAccepted + "%, #ffc107 100%)" } );
        }
    }

    function ReceiveTopProgressBarFunction() {
        let getUnreceivedTopNumbers = unreceivedTopNumbers.html();
        let getReceivedTopNumbers = receivedTopNumbers.html();

        if (getReceivedTopNumbers == 0) {
            receiveTopProgressBar.css( { background : "linear-gradient(to left, #ffc107 0%, #ffc107 100%)" } );
        }
        else {
            let percentageAccepted = getReceivedTopNumbers / getUnreceivedTopNumbers * 100;
            receiveTopProgressBar.css( { background : "linear-gradient(to left, #1a9c23 0%, #1a9c23 " + percentageAccepted + "%, #ffc107 " + percentageAccepted + "%, #ffc107 100%)" } );
        }
    }

    // Reject Modal

    openRejectModalBtn.click(function () {
        overlayRejectModal.css("display", "block");
        loadingTimeoutRejectModal = setTimeout(function () {
                loadingIsRunning = true;
                rejectModalMainContent.css("display", "none");
                rejectModalLoadingContainer.css("display", "block");
            }, 20);

        let thisElement = $(this).closest(tbodyTr);

        if (thisElement.data("barcode") != "" || thisElement.data("barcode") != null) {
            currentBarcode = thisElement.data("barcode");
            GetOneReceiveOrder(thisElement.data("barcode"));
        }
        else {
            ClearLoadingTimeoutRejectModal();
        }
    });

    closeRejectModalBtn.click(function () {
        currentBarcode = "";
        currentreceiveOrderItemID = "";
        overlayRejectModal.css("display", "none");
        nameRejectedModal.text("NULL");
        skuRejectedModal.text("NULL");
        imageRejectedModal.attr("src", '/Images/Placeholders/Placeholder.jpg');
        quantityErrorRejectModalText.text("");
        selectedErrorRejectModalText.text("");
        quantityRejectModalInput.val("");
        noteRejectModalInput.val("");
        selectRejectModalInput.val("Select One").change();
        
        $(".receive-rejectmodal-table-container").css("display", "block");
        $(".receive-rejectmodal-overall-content-container").css("display", "block");

        RemoveAlertPopupFunction();

        ClearLoadingTimeoutRejectModal();
        ClearLoadingTimeoutRejectAddModal();

        $(".receive-rejectmodal-allreasons-container").find("tr").remove();
    });

    function AddNewData(result) {
        nameRejectedModal.text(result.name);
        skuRejectedModal.text(result.barcode);
        numberRejectedModal.text(result.rejected);

        if (result.image != null) {
            imageRejectedModal.attr("src", '/Images/Products/' + result.image);
        }

        if (result.rejectedItems.length != 0) {
            for (var i = 0; i < result.rejectedItems.length; i++) {
                $(".receive-rejectmodal-table-tbody-output").append(
                    '<tr>' +
                        '<td><input readonly class="receive-rejectmodal-table-numberInput receive-rejectmodal-table-noborder background-dark" type="number" value="' + result.rejectedItems[i].quantity + '" /></td>' +
                        '<td><input readonly class="receive-rejectmodal-table-select receive-rejectmodal-table-noborder background-dark" type="text" value="' + result.rejectedItems[i].receiveRejectedReasons.reason + '" /></td>' +
                        '<td><input readonly class="receive-rejectmodal-table-note receive-rejectmodal-table-noborder background-dark" type="text" value="' + result.rejectedItems[i].note + '" /></td>' +
                        '<td style="position:relative !important;"><button class="receive-rejectmodal-table-delete-btn" data-rejectid="' + result.rejectedItems[i].id + '">Delete</button></td>'
                    + '</tr>'
                );
            }
        }
    }

    $(document).on("click", ".receive-rejectmodal-table-delete-btn", function() {
        RejectAddAndDeleteTimeoutFunction();
        DeleteOneRejected($(this));
    });

    function RemoveRejectHtml(thisElement, quantity) {
        let getQuantity = parseInt(quantity);
        thisElement.closest("tr").remove();

        $(".receive-rejectmodal-rejected-number").text(function(i,v) {
            let getNumber = parseInt(v);
            if(getNumber > 0) {
                let result = getNumber - getQuantity;
                return result;
            }
            return;
        });

        tbodyTr.each(function(index) {
            if($(this).data("barcode") == currentBarcode) {

                $(this).find(rejectedPTag).text(function(i,v) {
                    let getNumber = parseInt(v);
                    if(getNumber > 0) {
                        let result = getNumber - getQuantity;
                        return result;
                    }
                    return;
                });

                $(this).find(unreceivedPTag).text(function(i,v) {
                    let getNumber = parseInt(v);
                    let result = getNumber + getQuantity;
                    return result;
                });

                ReceiveProgressBarFunction($(this));
            }
        });
    }

    function AddRejectHtml(quantity) {
        let getQuantity = parseInt(quantity);

        $(".receive-rejectmodal-rejected-number").text(function(i,v) {
            let getNumber = parseInt(v);
            if(getNumber >= 0) {
                let result = getNumber + getQuantity;
                return result;
            }
            return;
        });

        tbodyTr.each(function(index) {
            if($(this).data("barcode") == currentBarcode) {

                $(this).find(rejectedPTag).text(function(i,v) {
                    let getNumber = parseInt(v);
                    if(getNumber >= 0) {
                        let result = getNumber + getQuantity;
                        return result;
                    }
                    return;
                });

                $(this).find(unreceivedPTag).text(function(i,v) {
                    let getNumber = parseInt(v);
                    let result = getNumber - getQuantity;
                    return result;
                });

                ReceiveProgressBarFunction($(this));
            }
        });
    }

    quantityRejectModalInput.on("input", function () {
        if(quantityRejectModalInput.val() > 1 && quantityRejectModalInput.val().startsWith("0") || quantityRejectModalInput.val().startsWith("0") || quantityRejectModalInput.val().startsWith("-")) {
            quantityRejectModalInput.val("0");
            quantityErrorRejectModalText.text("Kan ikke være 0 eller mindre");
        }
        else {
            if (quantityErrorRejectModalText.text() != "")
                quantityErrorRejectModalText.text("");
        }
    });

    addRejectModalBtn.click(function () {
        let getQuantity = quantityRejectModalInput.val();
        let getSelectedReasonID = selectRejectModalInput.find(":selected").data("reasonid");
        let getSelectedReason = selectRejectModalInput.find(":selected").text();
        let getNote = noteRejectModalInput.val();

        if(quantityRejectModalInput.val() > 1 && quantityRejectModalInput.val().startsWith("0") || quantityRejectModalInput.val().startsWith("0") || quantityRejectModalInput.val().startsWith("-") || quantityRejectModalInput.val() == "") {
            quantityRejectModalInput.val("0");
            quantityErrorRejectModalText.text("Kan ikke være 0 eller mindre");
            return
        }

        if (quantityErrorRejectModalText.text() != "")
            quantityErrorRejectModalText.text("");

        if (getSelectedReasonID == "none") {
            selectedErrorRejectModalText.text("You need to select an option");
            return;
        }

        if (selectedErrorRejectModalText.text("") != "")
            selectedErrorRejectModalText.text("");

        RejectAddAndDeleteTimeoutFunction();

        CreateOneReject(getQuantity, getSelectedReasonID, getSelectedReason, getNote);
    });

    function CreateNewReject(quantity, selectedReason, note, rejectID) {
        $(".receive-rejectmodal-table-tbody-output").append(
            '<tr>' +
                '<td><input readonly class="receive-rejectmodal-table-numberInput receive-rejectmodal-table-noborder background-dark" type="number" value="' + quantity + '" /></td>' +
                '<td><input readonly class="receive-rejectmodal-table-select receive-rejectmodal-table-noborder background-dark" type="text" value="' + selectedReason + '" /></td>' +
                '<td><input readonly class="receive-rejectmodal-table-note receive-rejectmodal-table-noborder background-dark" type="text" value="' + note + '" /></td>' +
                '<td style="position:relative !important;"><button class="receive-rejectmodal-table-delete-btn" data-rejectid="' + rejectID + '">Delete</button></td>'
            + '</tr>'
        );

        AddRejectHtml(quantity);
    }

    function RejectAddAndDeleteTimeoutFunction() {
        loadingTimeoutRejectAddModal = setTimeout(function () {
            loadingIsRunning = true;
            addRejectModalBtn.css("display", "none");
            closeRejectModalBtn.css("display", "none");
            rejectModalAddLoadingContainer.css("display", "block");
        }, 20);
    }

    function ClearLoadingTimeout() {
        clearTimeout(loadingTimeoutBarcodeScanner);
        loadingIsRunning = false;
        barcodescannerLoadingOverlay.css("display", "none");
    }

    function ClearLoadingTimeoutRejectModal() {
        clearTimeout(loadingTimeoutRejectModal);
        loadingIsRunning = false;
        rejectModalLoadingContainer.css("display", "none");
        rejectModalMainContent.css("display", "block");
    }

    function ClearLoadingTimeoutRejectAddModal() {
        clearTimeout(loadingTimeoutRejectAddModal);
        loadingIsRunning = false;
        closeRejectModalBtn.css("display", "block");
        rejectModalAddLoadingContainer.css("display", "none");
        addRejectModalBtn.css("display", "block");
    }

    function AddProductDatabase(scanned_barcode, receivingItemId, thisElement) {
        $.ajax({
            type: "POST",
            url: "/Receive/AddProduct",
            headers: {"RequestVerificationToken": "@GetAntiXsrfRequestToken()"},
            data: { barcode: scanned_barcode, receivingItemID: receivingItemId },
            success: function (result) {
                ClearLoadingTimeout();
                RemoveAlertPopupFunction();

                if(result.boolean == true) {
                    AddProduct(thisElement);
                }
                else if(result.databaseError == true) {
                    AlertPopup($(".receive-top-overall-container"), "Database Error!", result.msg, true);
                }
                else {
                    AlertPopup($(".receive-top-overall-container"), "Product not found!", result.msg, false);
                }
            },
            error: function (req, status, error) {
                ClearLoadingTimeout();
                AlertPopup($(".receive-top-overall-container"), "Error!","An error has occured, try again or contact an administrator", false);
                console.log(status);
            }
        });
    }

    function GetOneReceiveOrder(barcode) {
        $.ajax({
            type: "GET",
            url: "/Receive/GetOneReceiveOrder",
            data: { barcode: barcode },
            success: function (result) {
                ClearLoadingTimeoutRejectModal();
                RemoveAlertPopupFunction();

                if(result.boolean == true) {
                    currentreceiveOrderItemID = result.itemID;
                    AddNewData(result);
                }
                else {
                    $(".receive-rejectmodal-table-container").css("display", "none");
                    $(".receive-rejectmodal-overall-content-container").css("display", "none");
                    AlertPopup($(".receive-rejectmodal-alert-container"), "Rejected items not found!", result.msg, false);
                }
            },
            error: function (req, status, error) {
                ClearLoadingTimeoutRejectModal();
                RemoveAlertPopupFunction();

                $(".receive-rejectmodal-table-container").css("display", "none");
                $(".receive-rejectmodal-overall-content-container").css("display", "none");
                AlertPopup($(".receive-rejectmodal-alert-container"), "Error!","An error has occured, try again or contact an administrator", false);
            }
        });
    }

    function DeleteOneRejected(thisElement) {
        $.ajax({
            type: "POST",
            url: "/Receive/DeleteOneRejected",
            headers: {"RequestVerificationToken": "@GetAntiXsrfRequestToken()"},
            data: { rejectID: thisElement.data("rejectid") },
            success: function (result) {
                ClearLoadingTimeoutRejectAddModal();
                RemoveAlertPopupFunction();

                if(result.boolean == true) {
                    RemoveRejectHtml(thisElement, result.quantity);
                }
                else if (result.databaseError == true) {
                    AlertPopup($(".receive-rejectmodal-alert-container"), "Database Error!", result.msg, true);
                }
                else {
                    AlertPopup($(".receive-rejectmodal-alert-container"), "Rejected items not found!", result.msg, false);
                }
            },
            error: function (req, status, error) {
                ClearLoadingTimeoutRejectAddModal();
                AlertPopup($(".receive-rejectmodal-alert-container"), "Error!","An error has occured, try again or contact an administrator", false);
            }
        });
    }

    function CreateOneReject(quantity, selectedReasonID, selectedReason, note) {
        $.ajax({
            type: "POST",
            url: "/Receive/CreateOneReject",
            headers: {"RequestVerificationToken": "@GetAntiXsrfRequestToken()"},
            data: { quantity: quantity, selectedReasonID: selectedReasonID, note: note, itemID: currentreceiveOrderItemID },
            success: function (result) {
                ClearLoadingTimeoutRejectAddModal();
                RemoveAlertPopupFunction();

                if(result.boolean == true) {
                    quantityErrorRejectModalText.text("");
                    selectedErrorRejectModalText.text("");
                    quantityRejectModalInput.val("");
                    noteRejectModalInput.val("");
                    selectRejectModalInput.val("Select One").change();
                    CreateNewReject(quantity, selectedReason, note, result.rejectID);
                }
                else if (result.databaseError == true) {
                    AlertPopup($(".receive-rejectmodal-alert-container"), "Database Error!", result.msg, true);
                }
                else {
                    AlertPopup($(".receive-rejectmodal-alert-container"), "Error!", result.msg, false);
                }
            },
            error: function (req, status, error) {
                ClearLoadingTimeoutRejectAddModal();
                AlertPopup($(".receive-rejectmodal-alert-container"), "Error!","An error has occured, try again or contact an administrator", false);
            }
        });
    }
</script>
}