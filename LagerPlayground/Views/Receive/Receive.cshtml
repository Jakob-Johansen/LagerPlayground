@model LagerPlayground.Models.ReceivingOrder_Details
@inject Microsoft.AspNetCore.Antiforgery.IAntiforgery Xsrf

@functions {
    public string GetAntiXsrfRequestToken()
    {
        return Xsrf.GetAndStoreTokens(Context).RequestToken;
    }
}

@{
    ViewData["Title"] = "Receive";
}

<h2>Receive</h2>

<table class="table receive-table w-auto">
    <thead>
        <tr>
            <th class="receive-first" style="width: 350px;">Product</th>
            <th>Unreceived</th>
            <th>Rejected</th>
            <th>Accepted</th>
            <th class="receive-last">Activity</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var item in Model.ReceivingOrder_Items)
        {
            <tr class="receive-table-tbody-tr background-dark">
                <td class="receive-first">
                    <div class="receive-table-product-overall-container">
                        <div class="receive-table-product-image-container">
                            <img src="~/Images/@(item.Product.Image == null ? "Placeholders/Placeholder.jpg" : "Products/" + item.Product.Image)" />
                        </div>
                        <div class="receive-table-product-info-container">
                            <p class="trim">@item.Product.Name</p>
                            <p class="trim"><span class="receive-table-product-info-sku">SKU: </span>@item.Product.BarcodeID</p>
                        </div>
                    </div>
                </td>
                <td>@item.Quantity</td>
                <td>@item.Rejected</td>
                <td><input type="number" value="@item.Accepted" class="form-control background-dark receive-accepted-input" style="width: 120px !important;" /></td>
                <td class="receive-last">
                    <div class="receive-table-activity-overall-container">
                        <div class="receive-table-activity-info-container">
                            <p class="trim">Rejected</p>
                            <p class="receive-table-activity-info-quantity trim">@item.Rejected</p>
                        </div>
                        <div class="receive-table-activity-info-container receive-table-activity-info-container-padding">
                            <p class="trim">Accepted</p>
                            <p class="receive-table-activity-info-quantity trim">@item.Accepted</p>
                        </div>
                        <div class="receive-table-activity-info-container">
                            <p class="trim">Unreceived</p>
                            <p class="receive-table-activity-info-quantity trim">@(item.Quantity - item.Accepted)</p>
                        </div>
                    </div>
                    <div class="receive-table-activity-info-progress"></div>
                    <p class="receive-table-activity-info-ordered-text trim">Ordered: @item.Quantity</p>
                </td>
            </tr>
        }
    </tbody>
</table>

@section Scripts {
<script>
    let acceptedInput = $(".receive-accepted-input");

    // Loading variabler
    let loader = $(".loader");
    let loadingIsRunning = false;

    // Scanner variabler
    let barcode = '';
    let interval;

    acceptedInput.on("input", function () {
        if(acceptedInput.val() < 0 || acceptedInput.val().startsWith("0")) {
            acceptedInput.val("0");
            console.log("Test");
        }
    });

    // Timeout/delay functions
    function loadingTimeout() {
        setTimeout(function () {
                loadingIsRunning = true;
                //loader.css("display", "block");
        }, 20);
    }

    // Scanner event and functions
    document.addEventListener("keydown", function (evt) {
        if (interval) {
            clearInterval(interval);
        }

        if (evt.code.includes("Enter")) {
            if (barcode) {
                handleBarcode(barcode);
                //if (loadingIsRunning == false)  {
                //    handleBarcode(barcode);
                //}
                barcode = '';

                return;
            }
        }
        if (!evt.code.includes("Shift") && !evt.code.includes("CapsLock")) {
            barcode += evt.key;
        }
        interval = setInterval(() => barcode = '', 20);
    });

    function handleBarcode(scanned_barcode) {
        scanned_barcode = scanned_barcode.trim();

        if (scanned_barcode.length >= 1) {
            console.log(scanned_barcode);
            //if (scanned_barcode != currentBarcode) {
            //    //ajaxResult = false;
            //    //loadingTimeout();

            //    //currentBarcode = scanned_barcode;
            //    //lastScannedBarcode = scanned_barcode;
            //}
        }
    }
</script>
}