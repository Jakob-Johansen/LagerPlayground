@inject Microsoft.AspNetCore.Antiforgery.IAntiforgery Xsrf

@model LagerPlayground.Models.Locations_Racks

@functions {
    public string GetAntiXsrfRequestToken()
    {
        return Xsrf.GetAndStoreTokens(Context).RequestToken;
    }
}

@{
    ViewData["Title"] = "Rack Details";
}

<div class="rackDetails-overall-container">
    <div class="rackDetails-left-container">
        <div class="rackDetails-container">
            <h2>Location Details</h2>

            <p>Warehouse: @Model.Locations.Warehouse</p>
            <p>Section: @Model.Locations.Section</p>
            <p>Row: @Model.Locations.Row</p>
            <p>Rack: @Model.RackNumber</p>
            <a href='javascript:history.go(-1)'>Back to Location Details</a>

            <div class="rackDetails-createBins-overall-container">
                <div class="rackDetails-createBins-form-container">
                    <label class="rackDetails-createBins-form-label">Create Shelf & Bins</label>
                    <input class="rackDetails-createBins-form-number" placeholder="0" type="number" />
                    <a class="rackDetails-createBins-form-btn">Add</a>
                </div>
            </div>
        </div>
    </div>
    <div class="rackDetails-right-container">
        <div class="rackDetails-container">

            <div class="rackDetails-rack-header-btn-overall-container">
                <div class="rackDetails-rack-header-btn-float-overall-container">
                    <div class="rackDetails-rack-header-btn-float-container">
                        <a class="rackDetails-rack-header-print-btn">Print</a>
                    </div>
@*                    <div class="rackDetails-rack-header-btn-float-container">
                        <a class="rackDetails-rack-header-delete-btn">Delete</a>
                    </div>*@
                </div>
                <div class="clearBoth"></div>
            </div>

            <div class="rackDetails-rack-top-border"></div>
            <div class="rackDetails-rack-overall-container">

                @*                    <div class="rackDetails-rack-container">
                    <div class="rackDetails-rack-Bins-overall-container">
                    <div class="rackDetails-rack-Bins-float-container">
                    <div class="rackDetails-rack-Bins-container">
                    <p class="trim rackDetails-rack-Bins-text-number">01</p>
                    </div>
                    </div>
                    <div class="rackDetails-rack-Bins-float-container">
                    <div class="rackDetails-rack-Bins-container">
                    <p class="trim rackDetails-rack-Bins-text-number">01</p>
                    </div>
                    </div>
                    </div>
                    <div class="clearBoth"></div>
                    <div class="rackDetails-rack-shelf-container">
                    <p class="trim rackDetails-rack-shelf-text">Shelf: <span class="rackDetails-rack-shelf-text-number">03</span></p>
                    </div>
                    </div>*@

                @foreach (var shelf in Model.Locations_Shelfs.OrderByDescending(x => x.ShelfNumber))
                {
                    <div class="rackDetails-rack-container">
                        <div class="rackDetails-rack-Bins-overall-container">
                            @{
                                var getWidth = Math.Round(Decimal.Divide(100, shelf.Locations_Positions.Count()), 3);
                                string getWidthString = getWidth.ToString().Replace(",", ".");

                                foreach (var position in shelf.Locations_Positions)
                                {
                                    <div class="rackDetails-rack-Bins-float-container" style="width: @getWidthString%;">
                                        <div class="rackDetails-rack-Bins-container" data-positionid="@position.ID">
                                            <p class="trim rackDetails-rack-Bins-text-number">@(position.PositionNumber < 10 ? "0" + position.PositionNumber : position.PositionNumber)</p>
                                        </div>
                                    </div>
                                }
                            }
                        </div>
                        <div class="clearBoth"></div>
                        <div class="rackDetails-rack-shelf-container">
                            <p class="trim rackDetails-rack-shelf-text">Shelf: <span class="rackDetails-rack-shelf-text-number">@(shelf.ShelfNumber < 10 ? "0" + shelf.ShelfNumber : shelf.ShelfNumber)</span> ^</p>
                        </div>
                    </div>
                }
            </div>
            <div class="rackDetails-rack-bottom-border"></div>
        </div>
    </div>
</div>

<p>Når man trykker på en shelf skal man kunne slette og tilføje bins/positioner, den shelf skal skifte farve så man tydeligt kan se hvilken det er, man skal også kunne slette en shelf</p>
@section Scripts {
<script>
    const createBtn = $(".rackDetails-createBins-form-btn");
    let binInputField = $(".rackDetails-createBins-form-number");

    let allSelectedBins = [];
    const activeSelectBin = "activeSelectBin";

    const printBtn = $(".rackDetails-rack-header-print-btn"); 

    const shelfOverAllContainer = $(".rackDetails-rack-overall-container");

    // Create Bins

    binInputField.on("input", function () {
        let binInputFieldVal = parseInt(binInputField.val());
        if (binInputFieldVal < 1 || binInputField.val().startsWith(0))
        {
            binInputField.val(0);
        }
    });

    createBtn.click(function () {
        let binInputFieldVal = parseInt(binInputField.val());
        if (binInputField.val().trim() == "" || binInputFieldVal < 1) {
            return;
        }

        CreateShelfAndBins(binInputField.val());
    });

    // Print

    printBtn.click(function () {
        if (allSelectedBins.length == 0) {
            console.log("No Positions was selected");
            return;
        }

        PrintSelectedPositions(allSelectedBins);
    });

    // Select functions

    $(document).on("click", ".rackDetails-rack-Bins-container", function () {
        if($(this).hasClass(activeSelectBin)) {
            $(this).removeClass(activeSelectBin);
            $(this).find(".rackDetails-rack-Bins-text-number").attr("style", "color: black !important;");
            let index = allSelectedBins.indexOf($(this).data("positionid"));
            allSelectedBins.splice(index, 1);
        }
        else {
            $(this).addClass(activeSelectBin);
            $(this).find(".rackDetails-rack-Bins-text-number").attr("style", "color: white !important;");
            allSelectedBins.push($(this).data("positionid"));
        }
    });

    // Create shelf & bins in html function

    function CreateShelfAndBinsHtml(shelfID, shelfNumber, positions) {
        if (shelfNumber < 10) {
            shelfNumber = "0" + shelfNumber;
        }

        shelfOverAllContainer.prepend(
            `
            <div class="rackDetails-rack-container">
                <div class="rackDetails-rack-Bins-overall-container">

                </div>
                <div class="clearBoth"></div>
                <div class="rackDetails-rack-shelf-container" data-shelfid="${shelfID}">
                    <p class="trim rackDetails-rack-shelf-text">Shelf: <span class="rackDetails-rack-shelf-text-number">${shelfNumber}</span> ^</p>
                </div>
            </div>
            `
        );

        let getWidth = parseFloat(100 / positions.length).toFixed(3);

        for(var i = 0; i < positions.length; i++) {
            let newPositionNumber = positions[i].positionNumber;

            if (positions[i].positionNumber < 10) {
                newPositionNumber = "0" + positions[i].positionNumber;
            }

            shelfOverAllContainer.children(":first").find(".rackDetails-rack-Bins-overall-container").prepend(
                `
                <div class="rackDetails-rack-Bins-float-container" style="width: ${getWidth}%;">
                    <div class="rackDetails-rack-Bins-container" data-positionid="${positions[i].id}">
                        <p class="trim rackDetails-rack-Bins-text-number">${newPositionNumber}</p>
                    </div>
                </div>
                `
            );
        }
    }

    // Ajax Functions

    function CreateShelfAndBins(qty) {
        $.ajax({
            type: "POST",
            url: "/Location/CreateShelfAndBins",
            headers: { "RequestVerificationToken": "@GetAntiXsrfRequestToken()" },
            data: { quantity: qty, rackID: @Model.ID, rackNumber: @Model.RackNumber, row: "@Model.Locations.Row" },
            success: function (result) {
                if (result.booleanError == true) {
                    console.log("Success!");
                    CreateShelfAndBinsHtml(result.shelfID, result.shelfNumber, result.positions);
                }
                else {
                    console.log(result.msg)
                }
            },
            error: function (req, status, error) {
                console.log(status);
                console.log("ERROR");
            }
        });
    }

    function PrintSelectedPositions(selectedIds) {
    $.ajax({
        type: "POST",
        url: "/Location/PrintLocationBarcodes",
        data: { IDs: selectedIds },
        success: function (result) {

            if (result.booleanError == false) {
                window.open('/Pdf/Barcode.pdf', '_blank');
                $(".rackDetails-rack-Bins-container").removeClass(activeSelectBin);
                $(".rackDetails-rack-Bins-text-number").attr("style", "color: black !important;");
                allSelectedBins = [];
            }
            else {
                console.log(result.errorMsg);
            }
        },
        error: function (req, status, error) {
            console.log(status);
        }
    });
}
</script>
}