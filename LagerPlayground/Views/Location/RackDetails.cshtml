@inject Microsoft.AspNetCore.Antiforgery.IAntiforgery Xsrf

@model LagerPlayground.Models.Locations_Racks

@functions {
    public string GetAntiXsrfRequestToken()
    {
        return Xsrf.GetAndStoreTokens(Context).RequestToken;
    }
}

@{
    ViewData["Title"] = "Rack Details";
}

<div class="rackDetails-overall-container">
    <div class="rackDetails-left-container">
        <div class="rackDetails-container">
            <h2>Location Details</h2>

            <p>Warehouse: @Model.Locations.Warehouse</p>
            <p>Section: @Model.Locations.Section</p>
            <p>Row: @Model.Locations.Row</p>
            <p>Rack: @Model.RackNumber</p>
            <a href='javascript:history.go(-1)'>Back to Location Details</a>

            <div class="rackDetails-createBins-overall-container">
                <div class="rackDetails-createBins-form-container">
                    <label class="rackDetails-createBins-form-label">Create Shelf & Bins</label>
                    <div class="rackDetails-createBins-form-bins-container">
                        <label>Bins:</label>
                        <br />
                        <input class="rackDetails-createBins-form-bins rackDetails-binInput" placeholder="0" type="number" />
                    </div>
                    <div class="rackDetails-createBins-form-shelfs-container">
                        <label>Shelfs:</label>
                        <br />
                        <input class="rackDetails-createBins-form-shelfs rackDetails-shelfInput" placeholder="0" type="number" />
                    </div>
                    <a class="rackDetails-createBins-form-btn">Add</a>
                </div>
            </div>
        </div>
    </div>
    <div class="rackDetails-right-container">
        <div class="rackDetails-container">

            <div class="rackDetails-rack-header-btn-overall-container">

                <div class="rackDetails-rack-header-btn-float-left-overall-container">

                    <div class="rackDetails-rack-header-btn-container-left">
                        <ul class="rackDetails-rack-header-btn-container-ul">
                            <li>
                                <a class="rackDetails-rack-header-selectall-btn">Select All</a>
                            </li>
                            <li>
                                <a class="rackDetails-rack-header-deselectall-btn">Deselect All</a>
                            </li>
                            <li>
                                <a class="rackDetails-rack-header-print-btn">Print</a>
                            </li>
                            <li>
                                <a class="rackDetails-rack-header-deletetop-shelf-btn">Delete Top Shelf</a>
                            </li>
                        </ul>
                    </div>

                </div>


                <div class="rackDetails-rack-header-btn-float-right-overall-container">

                    <div class="rackDetails-rack-header-shelfoptions-btn-container-right">
                        <div class="rackDetails-rack-header-btn-float-container">
                            <a class="rackDetails-rack-header-delete-bin-btn">-</a>
                        </div>
                        <div class="rackDetails-rack-header-btn-float-container">
                            <a class="rackDetails-rack-header-add-bin-btn">+</a>
                        </div>
                        <div class="clearBoth"></div>
                    </div>

                    @* NEW BTNS *@
                    <div class="rackDetails-rack-header-pickable-btn-container-right">
                        <ul class="rackDetails-rack-header-pickable-btn-container-ul">
                            <li>
                                <a class="rackDetails-rack-header-nonpickable-btn">Non Pickable</a>
                            </li>
                            <li>
                                <a class="rackDetails-rack-header-pickable-btn">Pickable</a>
                            </li>
                        </ul>

                        <div class="clearBoth"></div>
                    </div>

                </div>
                <div class="clearBoth"></div>
            </div>

            <div class="rackDetails-rack-top-border"></div>
            <div class="rackDetails-rack-overall-container">

                @foreach (var shelf in Model.Locations_Shelfs.OrderByDescending(x => x.ShelfNumber))
                {
                    <div class="rackDetails-rack-container">
                        <div class="rackDetails-rack-Bins-overall-container">
                            @{
                                if(shelf.Locations_Positions.Count() != 0) 
                                {
                                    var getWidth = Math.Round(Decimal.Divide(100, shelf.Locations_Positions.Count()), 3);
                                    string getWidthString = getWidth.ToString().Replace(",", ".");

                                    foreach (var position in shelf.Locations_Positions)
                                    {
                                        <div class="rackDetails-rack-Bins-float-container" style="width: @getWidthString%;">
                                            @if(position.Pickable == true)
                                            {
                                            <div class="rackDetails-rack-Bins-container" data-positionid="@position.ID" data-pickablebool="true">
                                                <p class="trim rackDetails-rack-Bins-text-lock" style="display: none;"><span class="material-icons">lock</span></p>
                                                <p class="trim rackDetails-rack-Bins-text-number">@(position.PositionNumber < 10 ? "0" + position.PositionNumber : position.PositionNumber)</p>
                                            </div>
                                            }
                                            else
                                            {
                                            <div class="rackDetails-rack-Bins-container" data-positionid="@position.ID" data-pickablebool="false" style="background-color: #b8b8b8;">
                                                <p class="trim rackDetails-rack-Bins-text-lock" style="display: block;"><span class="material-icons">lock</span></p>
                                                <p class="trim rackDetails-rack-Bins-text-number">@(position.PositionNumber < 10 ? "0" + position.PositionNumber : position.PositionNumber)</p>
                                            </div>
                                            }
                                        </div>
                                    }                                   
                                }
                            }
                        </div>
                        <div class="clearBoth"></div>
                        <div class="rackDetails-rack-shelf-container" data-shelfid="@shelf.ID">
                            <p class="trim rackDetails-rack-shelf-text">Shelf: <span class="rackDetails-rack-shelf-text-number">@(shelf.ShelfNumber < 10 ? "0" + shelf.ShelfNumber : shelf.ShelfNumber)</span> ^</p>
                        </div>
                    </div>
                }
            </div>
            <div class="rackDetails-rack-bottom-border"></div>
        </div>
    </div>
</div>

<div class="tote-delete-overlay-overall-container">
    <div class="tote-overlay-container">
        <div class="tote-overlay-nav-overall-container">
            <div class="tote-overlay-nav-container">
                <p>Are you sure?</p>
            </div>
            <div class="tote-overlay-nav-container">
                <span class="material-icons tote-overlay-nav-close-btn">close</span>
            </div>
            <div class="clearBoth"></div>
        </div>

        <div class="tote-overlay-info-container">
            <p></p>
        </div>

        <div class="tote-overlay-btns-overall-container">
            <div class="tote-overlay-btns-container-cancel">
                <button class="tote-overlay-btn-cancel tote-overlay-nav-close-btn">Cancel</button>
            </div>
            <div class="tote-overlay-btns-container-add">
                <form asp-action="DeleteTopShelf">
                    <input class="deleteModalFormInputHidden" type="hidden" readonly name="ID" value="@Model.ID" />
                    <button class="tote-overlay-btn-add tote-overlay-btn-delete">Delete</button>
                </form>
            </div>

            <div class="clearBoth"></div>
        </div>

    </div>
</div>

@section Scripts {
<script>
    const createBtn = $(".rackDetails-createBins-form-btn");
    let binInputField = $(".rackDetails-binInput");
    let shelfInputField = $(".rackDetails-shelfInput");

    let allSelectedBins = [];
    const activeSelectBin = "activeSelectBin";
    const activeSelectShelf = "activeSelectShelf";

    const selectAll = $(".rackDetails-rack-header-selectall-btn");
    const deselectAll = $(".rackDetails-rack-header-deselectall-btn");
    const printBtn = $(".rackDetails-rack-header-print-btn");

    const positionsSelectBtnsContainer = $(".rackDetails-rack-header-pickable-btn-container-right");
    const pickableBtn = $(".rackDetails-rack-header-pickable-btn");
    const nonPickableBtn = $(".rackDetails-rack-header-nonpickable-btn");
    let allPickableAndNonPickable = []; 

    const shelfSelectBtnsContainer = $(".rackDetails-rack-header-shelfoptions-btn-container-right");
    const addBinBtn = $(".rackDetails-rack-header-add-bin-btn");
    const deleteBinBtn = $(".rackDetails-rack-header-delete-bin-btn");

    const shelfOverAllContainer = $(".rackDetails-rack-overall-container");

    const closeBtn = $(".tote-overlay-nav-close-btn");
    const deleteTopShelfBtn = $(".rackDetails-rack-header-deletetop-shelf-btn")
    const overlayDeleteContainer = $(".tote-delete-overlay-overall-container");

    const rackDetailsRackShelfContainer = $(".rackDetails-rack-shelf-container");
    const rackDetailsRackBinsContainer = $(".rackDetails-rack-Bins-container");

    // Delete Modal

    deleteTopShelfBtn.click(function () {
        overlayDeleteContainer.css("display", "block");
        $(".tote-overlay-info-container").find("p").text("You are deleting a Shelf. Are you sure you want to proceed?");
    });

    closeBtn.click(function () {
        overlayDeleteContainer.css("display", "none");
    });

    // Create Bins

    binInputField.on("input", function () {
        let binInputFieldVal = parseInt(binInputField.val());
        if (binInputFieldVal < 1 || binInputField.val().startsWith(0))
        {
            binInputField.val(0);
        }
    });

    shelfInputField.on("input", function () {
        let shelfInputFieldVal = parseInt(shelfInputField.val());
        if (shelfInputFieldVal < 1 || shelfInputField.val().startsWith(0))
        {
            shelfInputField.val(0);
        }
    });

    createBtn.click(function () {
        let binInputFieldVal = parseInt(binInputField.val());
        let shelfInputFieldVal = parseInt(shelfInputField.val());
        if (binInputField.val().trim() == "" || binInputFieldVal < 1 || shelfInputField.val().trim() == "" || shelfInputFieldVal < 1) {
            console.log("Fejl");
            return;
        }
        CreateShelfAndBins(binInputField.val(), shelfInputField.val());
    });

    // Print

    printBtn.click(function () {
        if (allSelectedBins.length == 0) {
            console.log("No Positions was selected");
            return;
        }
        PrintSelectedPositions(allSelectedBins);
    });

    // Select shelf functions

        // Select shelf
    $(document).on("click", ".rackDetails-rack-shelf-container", function () {
        $(".rackDetails-rack-Bins-container").removeClass(activeSelectBin);
        $(".rackDetails-rack-Bins-container").find(".rackDetails-rack-Bins-text-number").attr("style", "color: black !important;");
        allSelectedBins = [];
        positionsSelectBtnsContainer.css("display", "none");

        $(".rackDetails-rack-shelf-text").attr("style", "color: black !important;");
        $(".rackDetails-rack-container").attr("style", "border-color: #f0f0f0 !important;");


        if($(this).hasClass(activeSelectShelf)) {
            $(this).removeClass(activeSelectShelf);
            $(this).find(".rackDetails-rack-shelf-text").attr("style", "color: black !important;");
            $(this).parent(".rackDetails-rack-container").attr("style", "border-color: #f0f0f0 !important;");
            shelfSelectBtnsContainer.css("display", "none");
        }
        else {
            $(".rackDetails-rack-shelf-container").removeClass(activeSelectShelf);
            $(this).addClass(activeSelectShelf);
            $(this).find(".rackDetails-rack-shelf-text").attr("style", "color: white !important;");
            $(this).parent(".rackDetails-rack-container").attr("style", "border-color: #843df5 !important;");
            shelfSelectBtnsContainer.css("display", "block");
        }
    });

        // Add & Delete bins

    addBinBtn.click(function () {
        AddBinToShelf($(".activeSelectShelf").data("shelfid"));
    });

    deleteBinBtn.click(function () {
        DeleteBinFromShelf($(".activeSelectShelf").data("shelfid"));
    });

        // Pickable & NonPickable btns


    $(document).on("click", ".rackDetails-rack-header-pickable-btn", function () {
        allPickableAndNonPickable = [];

        $(".activeSelectBin").each(function () {
            if ($(this).attr("data-pickablebool") == false || $(this).attr("data-pickablebool") == "false") {
                if ($(this).data("positionid") != "") {
                    allPickableAndNonPickable.push($(this).data("positionid"));
                }
            }
        });
        MakePickable(allPickableAndNonPickable);
    });

    $(document).on("click", ".rackDetails-rack-header-nonpickable-btn", function () {
        allPickableAndNonPickable = [];

        $(".activeSelectBin").each(function () {
            if ($(this).attr("data-pickablebool") == true || $(this).attr("data-pickablebool") == "true") {
                if ($(this).data("positionid") != "") {
                    allPickableAndNonPickable.push($(this).data("positionid"));
                }
            }
        });
        MakeNonPickable(allPickableAndNonPickable);
    });

    // Select bins functions

        // Select one at a time
    $(document).on("click", ".rackDetails-rack-Bins-container", function () {
        $(".rackDetails-rack-shelf-container").removeClass(activeSelectShelf);
        $(".rackDetails-rack-shelf-text").attr("style", "color: black !important;");
        $(".rackDetails-rack-container").attr("style", "border-color: #f0f0f0 !important;");
        shelfSelectBtnsContainer.css("display", "none");

        if($(this).hasClass(activeSelectBin)) {
            $(this).removeClass(activeSelectBin);
            $(this).find(".rackDetails-rack-Bins-text-number").attr("style", "color: black !important;");
            let index = allSelectedBins.indexOf($(this).data("positionid"));
            allSelectedBins.splice(index, 1);
            if (allSelectedBins.length == 0) {
                positionsSelectBtnsContainer.css("display", "none");
            }
        }
        else {
            $(this).addClass(activeSelectBin);
            $(this).find(".rackDetails-rack-Bins-text-number").attr("style", "color: white !important;");
            allSelectedBins.push($(this).data("positionid"));
            positionsSelectBtnsContainer.css("display", "block");
        }
    });

        // Select All
    selectAll.click(function () {
        $(".rackDetails-rack-shelf-container").removeClass(activeSelectShelf);
        $(".rackDetails-rack-shelf-text").attr("style", "color: black !important;");
        $(".rackDetails-rack-container").attr("style", "border-color: #f0f0f0 !important;");
        shelfSelectBtnsContainer.css("display", "none");

        positionsSelectBtnsContainer.css("display", "block");
        $(".rackDetails-rack-Bins-container").each(function(index) {
            if(!$(this).hasClass(activeSelectBin)) {
                $(this).addClass(activeSelectBin);
                $(this).find(".rackDetails-rack-Bins-text-number").attr("style", "color: white !important;");
                allSelectedBins.push($(this).data("positionid"));
            }
        });
    });

        // Deselect All
    deselectAll.click(function () {
        $(".rackDetails-rack-Bins-container").removeClass(activeSelectBin);
        $(".rackDetails-rack-Bins-container").find(".rackDetails-rack-Bins-text-number").attr("style", "color: black !important;");
        allSelectedBins = [];
        positionsSelectBtnsContainer.css("display", "none");

        $(".rackDetails-rack-shelf-text").attr("style", "color: black !important;");
        $(".rackDetails-rack-container").attr("style", "border-color: #f0f0f0 !important;");
        shelfSelectBtnsContainer.css("display", "none");
        $(".rackDetails-rack-shelf-container").removeClass(activeSelectShelf);
    });

    // Create shelf & bins in html function

        // New Version
    function CreateShelfAndBinsHtml(locationData) {
        for(var i = 0; i < locationData.length; i++) {
            if (locationData[i].shelfNumber < 10) {
                locationData[i].shelfNumber = "0" + locationData[i].shelfNumber;
            }

            shelfOverAllContainer.prepend(
                `
                <div class="rackDetails-rack-container">
                    <div class="rackDetails-rack-Bins-overall-container">

                    </div>
                    <div class="clearBoth"></div>
                    <div class="rackDetails-rack-shelf-container" data-shelfid="${locationData[i].shelfID}">
                        <p class="trim rackDetails-rack-shelf-text">Shelf: <span class="rackDetails-rack-shelf-text-number">${locationData[i].shelfNumber}</span> ^</p>
                    </div>
                </div>
                `
            );

            let getWidth = parseFloat(100 / locationData[i].positionLength).toFixed(3);

            for(var j = 0; j < locationData[i].vmPositions.length; j++) {
                let newPositionNumber = locationData[i].vmPositions[j].positionNumber;

                if (locationData[i].vmPositions[j].positionNumber < 10) {
                    newPositionNumber = "0" + locationData[i].vmPositions[j].positionNumber;
                }

                shelfOverAllContainer.children(":first").find(".rackDetails-rack-Bins-overall-container").prepend(
                    `
                    <div class="rackDetails-rack-Bins-float-container" style="width: ${getWidth}%;">
                        <div class="rackDetails-rack-Bins-container" data-positionid="${locationData[i].vmPositions[j].positionID}" data-pickablebool="true">
                            <p class="trim rackDetails-rack-Bins-text-lock" style="display: none;"><span class="material-icons">lock</span></p>
                            <p class="trim rackDetails-rack-Bins-text-number">${newPositionNumber}</p>
                        </div>
                    </div>
                    `
                );
            }
        }
    }

        // Add Bin Html
    function CreateBinFunctionHtml (positionID, positionNumber) {
        let newWidth = parseFloat(100 / positionNumber).toFixed(3);
        
        if(positionNumber < 10) {
            positionNumber = "0" + positionNumber;
        }

        $(".activeSelectShelf").parent(".rackDetails-rack-container").find(".rackDetails-rack-Bins-overall-container").find(".rackDetails-rack-Bins-float-container").each(function(index){
            $(this).css("width", newWidth + "%");
        });

        $(".activeSelectShelf").parent(".rackDetails-rack-container").find(".rackDetails-rack-Bins-overall-container").append(
        `
        <div class="rackDetails-rack-Bins-float-container" style="width: ${newWidth}%;">
            <div class="rackDetails-rack-Bins-container" data-positionid="${positionID}" data-pickablebool="true">
                <p class="trim rackDetails-rack-Bins-text-lock" style="display: none;"><span class="material-icons">lock</span></p>
                <p class="trim rackDetails-rack-Bins-text-number">${positionNumber}</p>
            </div>
        </div>
        `
        );
    }

    // Remove Shelfs & Bins in Html

        // Delete Bin
    function DeleteBinFunctionHtml(positionNumber) {
        $(".activeSelectShelf").parent(".rackDetails-rack-container").find(".rackDetails-rack-Bins-overall-container").children().last().remove();
        let newWidth = parseFloat(100 / positionNumber).toFixed(3);

        $(".activeSelectShelf").parent(".rackDetails-rack-container").find(".rackDetails-rack-Bins-overall-container").find(".rackDetails-rack-Bins-float-container").each(function(index){
            $(this).css("width", newWidth + "%");
        });
    }

    // Pickable & NonPickable Html

        // Pickable edit html function
    function PickableEditHtml(IDList, boolean, backgroundColor) {
        $(".activeSelectBin").each(function () {
            for(var i = 0; i < IDList.length; i++) {
                if ($(this).data("positionid") == IDList[i]) {
                    $(this).css("backgroundColor", backgroundColor);
                    $(this).attr("data-pickablebool", boolean);
                    if (boolean == false) {
                        $(this).find(".rackDetails-rack-Bins-text-lock").attr("style", "display: block;");
                    }
                    else {
                        $(this).find(".rackDetails-rack-Bins-text-lock").attr("style", "display: none;");
                    }
                }
            }
        });
        $(".rackDetails-rack-Bins-container").removeClass("activeSelectBin");
        $(".rackDetails-rack-Bins-container").find(".rackDetails-rack-Bins-text-number").attr("style", "color: black !important;");
        positionsSelectBtnsContainer.css("display", "none");
        allSelectedBins = [];
        allPickableAndNonPickable = [];
    }

    // Ajax Functions

    function CreateShelfAndBins(binQty, shelfQty) {
        $.ajax({
            type: "POST",
            url: "/Location/CreateShelfAndBins",
            headers: { "RequestVerificationToken": "@GetAntiXsrfRequestToken()" },
            data: { binQuantity: binQty, shelfQuantity: shelfQty, rackID: @Model.ID, rackNumber: @Model.RackNumber, row: "@Model.Locations.Row" },
            success: function (result) {

                if (result.booleanError == true) {
                    CreateShelfAndBinsHtml(result.locationData);
                }
                else {
                    console.log(result.msg);
                    alert(result.msg);
                }
            },
            error: function (req, status, error) {
                console.log(status);
                alert(status);
            }
        });
    }

    function PrintSelectedPositions(selectedIds) {
        $.ajax({
            type: "POST",
            url: "/Location/PrintLocationBarcodes",
            headers: { "RequestVerificationToken": "@GetAntiXsrfRequestToken()" },
            data: { IDs: selectedIds },
            success: function (result) {

                if (result.booleanError == false) {
                    window.open('/Pdf/Barcode.pdf', '_blank');
                    $(".rackDetails-rack-Bins-container").removeClass(activeSelectBin);
                    $(".rackDetails-rack-Bins-text-number").attr("style", "color: black !important;");
                    allSelectedBins = [];
                }
                else {
                    console.log(result.errorMsg);
                    alert(result.errorMsg);
                }
            },
            error: function (req, status, error) {
                console.log(status);
                alert(status);
            }
        });
    }

    function AddBinToShelf(shelfID) {
        $.ajax({
            type: "POST",
            url: "/Location/AddBinToShelf",
            headers: { "RequestVerificationToken": "@GetAntiXsrfRequestToken()" },
            data: { ShelfID: shelfID },
            success: function (result) {

                if (result.booleanError == false) {
                    if (result.noPositions == true) {
                        console.log("No bins to delete");
                        return;
                    }
                    else {
                    CreateBinFunctionHtml(result.positionID, result.positionNumber);
                    }
                }
                else {
                    console.log(result.errorMsg);
                    alert(result.errorMsg);
                }
            },
            error: function (req, status, error) {
                console.log(status);
                alert(status);
            }
        });
    }

    function DeleteBinFromShelf(shelfID) {
        $.ajax({
            type: "POST",
            url: "/Location/DeleteBinFromShelf",
            headers: { "RequestVerificationToken": "@GetAntiXsrfRequestToken()" },
            data: { ShelfID: shelfID },
            success: function (result) {

                if (result.booleanError == false) {
                    DeleteBinFunctionHtml(result.positionNumber);
                }
                else {
                    console.log(result.errorMsg);
                    alert(result.errorMsg);
                }
            },
            error: function (req, status, error) {
                console.log(status);
                alert(status);
            }
        });
    }

    function MakePickable(IDList) {
        $.ajax({
            type: "POST",
            url: "/Location/MakePickableOrNonPickable",
            headers: { "RequestVerificationToken": "@GetAntiXsrfRequestToken()" },
            data: { IDList: IDList, makePickable: true },
            success: function (result) {

                if (result.booleanError == false) {
                    PickableEditHtml(IDList, true, "#B0916E");
                }
                else {
                    console.log(result.errorMsg);
                    alert(result.errorMsg);
                }
            },
            error: function (req, status, error) {
                console.log(status);
                alert(status);
            }
        });
    }

    function MakeNonPickable(IDList) {
        $.ajax({
            type: "POST",
            url: "/Location/MakePickableOrNonPickable",
            headers: { "RequestVerificationToken": "@GetAntiXsrfRequestToken()" },
            data: { IDList: IDList, makePickable: false },
            success: function (result) {

                if (result.booleanError == false) {
                    PickableEditHtml(IDList, false, "#b8b8b8");
                }
                else {
                    console.log(result.errorMsg);
                    alert(result.errorMsg);
                }
            },
            error: function (req, status, error) {
                console.log(status);
                alert(status);
            }
        });
    }
</script>
}