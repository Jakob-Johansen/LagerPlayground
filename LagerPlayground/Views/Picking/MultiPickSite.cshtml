
@{
    ViewData["Title"] = "Multi Pick";
}

<div class="pickSite-overall-container">
    
    @*--- Pick Batch Amount Modul ---*@
    <div class="pickSite-pickBatchAmount-overall-container">
        <div class="pickSite-pickBatchAmount-header-headline-container">
            <p class="trim pickSite-pickBatchAmount-header-headline">Multi item batch picking</p>
        </div>

        <div class="pickSite-pickBatchAmount-info-overall-container">
            <div class="pickSite-pickBatchAmount-info-logo-container">
                <span class="material-icons pickSite-pickBatchAmount-info-logo">shopping_basket</span>
            </div>

            <div class="pickSite-pickBatchAmount-info-headlines-container">
                <p class="trim pickSite-pickBatchAmount-info-headline">MULTI ITEM BATCH PICKING</p>
                <p class="trim pickSite-pickBatchAmount-info-underHeadline">How many totes<br />are you using?</p>
            </div>

            <div class="pickSite-pickBatchAmount-info-inputAndBtns-container">
                <span class="material-icons pickSite-pickBatchAmount-info-inputAndBtns-btn-remove">remove</span>
                <input type="number" class="pickSite-pickBatchAmount-info-inputAndBtns-input" placeholder="1" value="1" />
                <span class="material-icons pickSite-pickBatchAmount-info-inputAndBtns-btn-add">add</span>
            </div>

            <div class="pickSite-pickBatchAmount-info-start-btn-container">
                <a class="pickSite-pickBatchAmount-info-start-btn">Start Picking</a>
            </div>
        </div>
    </div>

    @*--- Items To Pick Modul ---*@
    <div class="pickSite-itemsToPick-overall-container">
        <div class="pickSite-header-headline-container">
            <a class="trim pickSite-itemsToPick-header-headline-back">Back</a>
            <p class="trim pickSite-header-headline">Items To Pick</p>
            <a class="trim pickSite-header-headline-progress">Progress</a>
        </div>

        <div class="pickSite-itemsToPick-container">
            
@*            <div class="pickSite-itemsToPick-item-overall-container">
                <div class="pickSite-itemsToPick-item-picknumber-container">
                    <p class="trim pickSite-itemsToPick-item-picknumber-text">Pick</p>
                    <p class="trim pickSite-itemsToPick-item-picknumber-number">1</p>
                </div>

                <div class="pickSite-itemsToPick-item-overall-info-container">
                    <div class="pickSite-itemsToPick-item-image-container">
                        <img class="pickSite-itemsToPick-item-image" src="~/Images/Placeholders/PlaceholderWhite.jpg" />
                    </div>

                    <div class="pickSite-itemsToPick-item-info-container">
                        <div class="pickSite-itemsToPick-item-info-headline-container">
                            <p class="trim">HWC-R-MD</p>
                            <p class="trim">On Hand: <span class="pickSite-itemsToPick-item-info-headline-onhand-span">2</span></p>
                        </div>
                        <p class="trim pickSite-itemsToPick-item-info-name">WIRELESS BARCODE SCANNER</p>
                        <p class="trim pickSite-itemsToPick-item-info-bin">Bin: <span class="pickSite-itemsToPick-item-info-bin-span">A-01-01-01</span></p>
                    </div>

                    <div class="pickSite-itemsToPick-item-sidemenu-container">
                        <span class="material-icons pickSite-itemsToPick-item-sidemenu-icon">more_vert</span>
                    </div>
                </div>
            </div>*@

        </div>

        <div class="pickSite-itemsToPick-footer-container">
            <p class="trim pickSite-itemsToPick-footer-orders">You have <span class="pickSite-itemsToPick-footer-orders-span">1</span> orders</p>
            <p class="trim pickSite-itemsToPick-footer-items"><span class="pickSite-itemsToPick-footer-items-span">5</span> items left to pick</p>
        </div>
    </div>

    @*--- Pick Or Scan Tote Modul ---*@
    <div class="pickSite-selectTote-overall-container">
        <div class="pickSite-selectTote-header-container">
            <div  class="pickSite-selectTote-header-nav-container">
                <p class="trim pickSite-selectTote-header-nav-back-btn">Back</p>
            </div>
            <div class="pickSite-selectTote-header-headlines-container">
                <p class="trim pickSite-selectTote-header-headlines-headline">MULTIITEM BATCH PICKING</p>
                <p class="trim pickSite-selectTote-header-headlines-desc">Scan an empty tote or select one from the list</p>
            </div>
        </div>
        <div class="pickSite-selectTote-search-overall-container">
            <div class="pickSite-selectTote-search-container">
                <span class="material-icons pickSite-selectTote-search-icon">search</span>
                <input type="text" class="pickSite-selectTote-search-input" />
            </div>
        </div>
        <div class="pickSite-selectTote-container">

@*            <div class="pickSite-selectTote-tote-overall-container">
                <div class="pickSite-selectTote-tote-container">
                    <div class="pickSite-selectTote-tote-icon-container">
                        <span class="material-icons pickSite-selectTote-tote-icon">inventory_2</span>
                    </div>
                    <div class="pickSite-selectTote-tote-text-container">
                        <p class="trim pickSite-selectTote-tote-text-name">Tote-52982</p>
                        <p class="trim pickSite-selectTote-tote-barcode">Barcode 250947278</p>
                    </div>
                </div>
            </div>*@

        </div>
    </div>

    @*--- Pick Into Tote Modul ---*@
    <div class="pickSite-pickIntoTote-overall-container">
        <div class="pickSite-header-headline-container">
            <a class="trim pickSite-pickIntoTote-header-headline-back">Back</a>
            <p class="trim pickSite-header-headline">Pick Into Tote</p>
            <a class="trim pickSite-header-headline-reportIssue">Report Issue</a>
        </div>

        <div class="pickSite-pickIntoTote-info-top-container">
            <p class="trim pickSite-pickIntoTote-info-name">PLACEHOLDER</p>
            <p class="trim pickSite-pickIntoTote-info-barcode"><b>SKU</b> <span class="pickSite-pickIntoTote-info-barcode-span">PLACEHOLDER</span></p>

            <div class="pickSite-pickIntoTote-info-image-container">
                <img class="pickSite-pickIntoTote-info-image" src="~/Images/Placeholders/Placeholder.jpg" />
            </div>
        </div>

        <div class="pickSite-pickIntoTote-quantity-overall-container">
            <div class="pickSite-pickIntoTote-quantity-info-container">
                <p class="trim pickSite-pickIntoTote-quantity-info-headline">Pick <span class="pickSite-pickIntoTote-quantity-info-headline-number">0</span> Units</p>
                <p class="trim pickSite-pickIntoTote-quantity-info-headline-position-barcode">from <span class="pickSite-pickIntoTote-quantity-info-headline-position-barcode-span">PLACEHOLDER</span></p>
                <p class="trim pickSite-pickIntoTote-quantity-info-underheadline">How many are you picking?</p>

                <div class="pickSite-pickIntoTote-quantity-container">
                    <span class="material-icons pickSite-pickIntoTote-quantity-btn-remove">remove</span>
                    <input type="number" class="pickSite-pickIntoTote-quantity-input" placeholder="0" value="0" />
                    <span class="material-icons pickSite-pickIntoTote-quantity-btn-add">add</span>
                </div>
            </div>

            <div class="pickSite-pickIntoTote-quantity-icon-container">
                <span class="material-icons pickSite-pickIntoTote-quantity-icon">inventory_2</span>
            </div>
        </div>

        <div class="pickSite-pickIntoTote-info-bottom-container">
            <p class="trim pickSite-pickIntoTote-info-text">Put picked items in</p>
            <p class="trim pickSite-pickIntoTote-info-toteName">PLACEHOLDER</p>

            <div class="pickSite-pickIntoTote-info-confirm-btn-container">
                <a class="pickSite-pickIntoTote-info-confirm-btn">Confirm</a>
            </div>

            <p class="trim pickSite-pickIntoTote-info-orderNumber">Order <span class="pickSite-pickIntoTote-info-orderNumber-span">20</span></p>
        </div>

    </div>

</div>

@section Scripts {
<script>
    // Variables
        //-Pick Batch Amount Variables
    const pickBatchAmountOverlay = $(".pickSite-pickBatchAmount-overall-container");
    const pickBatchAmountInput = $(".pickSite-pickBatchAmount-info-inputAndBtns-input");
    const pickBatchAmountBtnRemove = $(".pickSite-pickBatchAmount-info-inputAndBtns-btn-remove");
    const pickBatchAmountBtnAdd = $(".pickSite-pickBatchAmount-info-inputAndBtns-btn-add");
    const pickBatchAmountBtnStart = $(".pickSite-pickBatchAmount-info-start-btn");
        
        //-Items To Pick
    const itemsToPickOverlay = $(".pickSite-itemsToPick-overall-container");
    const itemsToPickBtnBack = $(".pickSite-itemsToPick-header-headline-back");

        //-Pick Or Scan Tote
    const pickOrScanToteOverlay = $(".pickSite-selectTote-overall-container");
    const pickOrScanToteBtnBack = $(".pickSite-selectTote-header-nav-back-btn");

        //-Pick Into Tote
    const pickIntoToteOverlay = $(".pickSite-pickIntoTote-overall-container");
    const pickIntoToteInput = $(".pickSite-pickIntoTote-quantity-input");
    const pickIntoToteBtnRemove = $(".pickSite-pickIntoTote-quantity-btn-remove");
    const pickIntoToteBtnAdd = $(".pickSite-pickIntoTote-quantity-btn-add");
    const pickIntoToteBtnConfirm = $(".pickSite-pickIntoTote-info-confirm-btn");
    const pickIntoToteBtnBack = $(".pickSite-pickIntoTote-header-headline-back");

        // Barcode scanner variables
    let barcode = '';
    let lastScannedBarcode = '';
    var currentBarcode = '';
    let productExist = false;
    let interval;

        //-Other
    let barcodeToScan = "";
    let orderToPickList = [];

    let currentOrderToPick;
    let selectedTote;

    let numberToPick = 0;

    let pickToteAmountIsRunning = true;
    let itemsToPickIsRunning = false;
    let toteToPickIsRunning = false;
    let pickIntoToteIsRunning = false;

    let loadingIsRunning = false;

    // Pick Batch Amount Funtions
        //-Click Add Btn
    pickBatchAmountBtnAdd.click(function() {
        AddOrRemove(true, pickBatchAmountInput);
    });

        //-Click Remove Btn
    pickBatchAmountBtnRemove.click(function() {
        AddOrRemove(false, pickBatchAmountInput);
    });

        //-On Input 
    $(document).on("input", ".pickSite-pickBatchAmount-info-inputAndBtns-input", function (event) {
        ValidateInputNumber($(this), 1, 1);
    });

        //-Click Start Picking
    pickBatchAmountBtnStart.click(function() {
        let parsedNumber = parseInt(pickBatchAmountInput.val());

        if (CheckForNumber(parsedNumber)) {
            GetOrdersToPickAjax(parsedNumber);
        }
        else {
            alert("Input field dosen't contain a number");
        }
    });

    // Items To Pick
        //-Click Back Btn
    itemsToPickBtnBack.click(function() {
        // TEST
        $(".pickSite-itemsToPick-item-overall-container").remove();
        pickToteAmountIsRunning = true;
        itemsToPickIsRunning = false;

        console.log("itemsToPickBtnBack");
        itemsToPickOverlay.css("display", "none");
        pickBatchAmountOverlay.css("display", "block");

    });

        //-Click On Item
    $(document).on("click", ".productToPick", function () {
        let dataBarcode = $(this).data("producttopickbarcode"); 
        if (dataBarcode == barcodeToScan) {
            ValidateScannedBarcode(dataBarcode);
        }
    });

    // Pick Or Scan Tote
        //-Click Back Btn
    pickOrScanToteBtnBack.click(function () {
        $(".pickSite-selectTote-container").remove();

        // TEST
        toteToPickIsRunning = false;
        itemsToPickIsRunning = true;

        console.log("pickOrScanToteBtnBack");
        pickOrScanToteOverlay.css("display", "none");
        itemsToPickOverlay.css("display", "block");
    });

        //-Click On Tote
    $(document).on("click", ".pickSite-selectTote-tote-container", function () {
        GetToteAjax($(this).data("totebarcode"));
    });

    // Pick Into Tote
        //-Click Add Btn
    pickIntoToteBtnAdd.click(function() {
        AddOrRemovePickIntoTote(true);
    });

        //-Click Remove Btn
    pickIntoToteBtnRemove.click(function() {
        AddOrRemovePickIntoTote(false);
    });

        //-On Input
    $(document).on("input", ".pickSite-pickIntoTote-quantity-input", function (event) {
        ValidateInputNumber($(this), 1, 1);    
    });

        //-Click Confirm Btn
    pickIntoToteBtnConfirm.click(function() {
        // TEST
        numberToPick = 0;
        selectedTote = null;
        PickIntoToteEditHtml(true);

        pickIntoToteIsRunning = false;
        itemsToPickIsRunning = true;

        console.log("Confirm");
        pickIntoToteOverlay.css("display", "none");
        itemsToPickOverlay.css("display", "block");
    });

        //-Click Back Btn
    pickIntoToteBtnBack.click(function () {
        // TEST
        numberToPick = 0
        selectedTote = null;
        PickIntoToteEditHtml(true);

        pickIntoToteIsRunning = false;
        toteToPickIsRunning = true;

        console.log("pickIntoToteBtnBack");
        pickIntoToteOverlay.css("display", "none");
        pickOrScanToteOverlay.css("display", "block");
    });

    // Functions
        //-Check For Number
    function CheckForNumber(numberToCheck) {
        if (isNaN(numberToCheck)) {
            return false;
        }
        else {
            return true;
        }
    }

        //-Validate Input - Number Only (minNumber = Can't go under, number = Standart Number)
    function ValidateInputNumber( thisInput, minNumber, number) {
        if (thisInput.val() < minNumber) {
            thisInput.val(number);
        }

        if (thisInput.val() != 0 && thisInput.val().startsWith("0")) {
            thisInput.val(number);
        }
    }

        //-Add Or Remove Function (true is add, false is remove)
    function AddOrRemove(bool, inputClass) {
        let seclectedInput = $(inputClass);
        let parsedInput = parseInt(seclectedInput.val());

        if (CheckForNumber(parsedInput)) {
            if (bool == true) {
                seclectedInput.val(parsedInput + 1);
            }

            if (bool == false) {
                if (parsedInput > 1) {
                    seclectedInput.val(parsedInput - 1);
                }
            }
        }
        else {
            seclectedInput.val("1");
        }
    }

        //-Add pick location to html
    function AddPickLocationsToHtml(mergedLocations) {
        for (var i = 0; i < mergedLocations.length; i++) {
            let productImage;

            if (mergedLocations[i].productImage == null) {
              productImage = "Placeholders/PlaceholderWhite.jpg";
            }
            else {
                productImage = "Products/" + mergedLocations[i].productImage;
            }

            let productToPickClass = "";

            if (i == 0) {
                productToPickClass = " productToPick";
            }

            $(".pickSite-itemsToPick-container").append(
            `
            <div class="pickSite-itemsToPick-item-overall-container${productToPickClass}" data-producttopickbarcode="${mergedLocations[i].productBarcode}">
                <div class="pickSite-itemsToPick-item-picknumber-container">
                    <p class="trim pickSite-itemsToPick-item-picknumber-text">Pick</p>
                    <p class="trim pickSite-itemsToPick-item-picknumber-number">${mergedLocations[i].pickQuantity}</p>
                </div>

                <div class="pickSite-itemsToPick-item-overall-info-container">
                    <div class="pickSite-itemsToPick-item-image-container">
                        <img class="pickSite-itemsToPick-item-image" src="/Images/${productImage}" />
                    </div>

                    <div class="pickSite-itemsToPick-item-info-container">
                        <div class="pickSite-itemsToPick-item-info-headline-container">
                            <p class="trim">${mergedLocations[i].productBarcode}</p>
                            <p class="trim">On Hand: <span class="pickSite-itemsToPick-item-info-headline-onhand-span">${mergedLocations[i].onHandQuantity}</span></p>
                        </div>
                        <p class="trim pickSite-itemsToPick-item-info-name">${mergedLocations[i].productName}</p>
                        <p class="trim pickSite-itemsToPick-item-info-bin">Bin: <span class="pickSite-itemsToPick-item-info-bin-span">${mergedLocations[i].locationBarcode}</span></p>
                    </div>

                    <div class="pickSite-itemsToPick-item-sidemenu-container">
                        <span class="material-icons pickSite-itemsToPick-item-sidemenu-icon">more_vert</span>
                    </div>
                </div>
            </div>
            `
            );
        }
    }
    
    function AddTotesToHtml(allTotes) {
        // Måske add en data id og barcode
        for (var i = 0; i < allTotes.length; i++) {
            $(".pickSite-selectTote-container").append(
            `
            <div class="pickSite-selectTote-tote-overall-container">
                <div class="pickSite-selectTote-tote-container" data-totebarcode="${allTotes[i].barcode}">
                    <div class="pickSite-selectTote-tote-icon-container">
                        <span class="material-icons pickSite-selectTote-tote-icon">inventory_2</span>
                    </div>
                    <div class="pickSite-selectTote-tote-text-container">
                        <p class="trim pickSite-selectTote-tote-text-name">${allTotes[i].name}</p>
                        <p class="trim pickSite-selectTote-tote-barcode">Barcode <span class="pickSite-selectTote-tote-barcode-span">${allTotes[i].barcode}</span></p>
                    </div>
                </div>
            </div>
            `
            );
        }

        // TEST
        itemsToPickIsRunning = false;
        toteToPickIsRunning = true;
        itemsToPickOverlay.css("display", "none");
        pickOrScanToteOverlay.css("display", "block");
    }

        //-Validate scanned barcode
    function ValidateScannedBarcode(scannedBarcode) {
        if (scannedBarcode == barcodeToScan) {
            GetAllTotesAjax();
        }
        else {
            alert("Wrong product scanned!");
        }
    }

        //-Edit Pick Into Tote html (default can be true or false)
    function PickIntoToteEditHtml(selectDefault) {
        let productName;
        let productBarcode;
        let productLocation;
        let productImage = "/Images/Placeholders/Placeholder.jpg";
        let toteName;
        let pickInput = 0;
        let orderID;

        if (selectDefault == true) {
            productName = "PLACEHOLDER";
            productBarcode = "PLACEHOLDER";
            productLocation = "PLACEHOLDER";
            toteName = "PLACEHOLDER";
            numberToPick = "0";
            orderID = "0";
        }
        else {
            productName = currentOrderToPick.productName;
            productBarcode = currentOrderToPick.productBarcode;
            productLocation = currentOrderToPick.locationBarcode;
            toteName = selectedTote.name;
            numberToPick = currentOrderToPick.pickQuantity;
            orderID = currentOrderToPick.order_DetailsID;

            if (currentOrderToPick.productImage != null) {
                productImage = "/Images/Products/" + currentOrderToPick.productImage;
            }
        }

        $(".pickSite-pickIntoTote-info-image").attr("src", productImage);
        $(".pickSite-pickIntoTote-info-name").text(productName);
        $(".pickSite-pickIntoTote-info-barcode-span").text(productBarcode);
        $(".pickSite-pickIntoTote-quantity-info-headline-number").text(numberToPick);
        $(".pickSite-pickIntoTote-quantity-info-headline-position-barcode-span").text(productLocation);
        $(".pickSite-pickIntoTote-quantity-input").val(pickInput);
        $(".pickSite-pickIntoTote-info-toteName").text(toteName);
        $(".pickSite-pickIntoTote-info-orderNumber-span").text(orderID);
    }

        //-Scan Product Into Tote
    function ScanAddQuantityPickIntoTote() {
        let seclectedInput = $(".pickSite-pickIntoTote-quantity-input");
        let parsedInput = parseInt(seclectedInput.val());

        if (CheckForNumber(parsedInput)) {
            if (parsedInput < currentOrderToPick.pickQuantity) {
                seclectedInput.val(parsedInput + 1);
                NumberToPickAddOrSub(true);
            }
        }
        else {
            seclectedInput.val("1");
        }
    }

            //-Add Or Remove Pick Into Tote (true is add, false is remove)
    function AddOrRemovePickIntoTote(bool) {
        let selectedInput = $(".pickSite-pickIntoTote-quantity-input");
        let parsedInput = parseInt(selectedInput.val());

        if (CheckForNumber(parsedInput)) {
            if (bool == true && parsedInput < currentOrderToPick.pickQuantity) {
                selectedInput.val(parsedInput + 1);
                NumberToPickAddOrSub(true);
            }

            if (bool == false && parsedInput > 0) {
                selectedInput.val(parsedInput - 1);
                NumberToPickAddOrSub(false);
            }
        }
        else {
            selectedInput.val("1");
        }
    }

        //-Used for AddOrRemovePickIntoTote and ScanAddQuantityPickIntoTote
    function NumberToPickAddOrSub(bool) {
        if (bool == true && numberToPick > 0) {
            numberToPick--;
        }

        if (bool == false && numberToPick < currentOrderToPick.pickQuantity) {
            numberToPick++;
        }

        $(".pickSite-pickIntoTote-quantity-info-headline-number").text(numberToPick);
    }

    // Scanner Fucntions
        //-Scanner event and functions
    document.addEventListener("keydown", function (evt) {
        if (interval) {
            clearInterval(interval);
        }

        if (evt.code.includes("Enter")) {
            if (barcode) {
                handleBarcode(barcode);
                barcode = '';
                return;
            }
        }
        if (!evt.code.includes("Shift") && !evt.code.includes("CapsLock")) {
            barcode += evt.key;
        }
        interval = setInterval(() => barcode = '', 20);
    });

    function handleBarcode(scanned_barcode) {
        scanned_barcode = scanned_barcode.trim();

        if (scanned_barcode.length >= 1) {
            if (pickToteAmountIsRunning != true) {
                lastScannedBarcode = currentBarcode;
                currentBarcode = scanned_barcode;

                if (itemsToPickIsRunning) {
                    ValidateScannedBarcode(currentBarcode);
                    //console.log("itemsToPickIsRunning = true");
                }

                if (toteToPickIsRunning) {
                    GetToteAjax(currentBarcode);
                    //console.log("toteToPickIsRunning = true");
                }

                if (pickIntoToteIsRunning) {
                    if (currentBarcode == currentOrderToPick.productBarcode) {
                        ScanAddQuantityPickIntoTote();
                    }
                    else {
                        alert("Wrong product scanned!");
                    }
                    //console.log("pickIntoToteIsRunning = true");
                }
            }
            else {
                console.log("pickToteAmountIsRunning = true");
            }
        }
    }

    // Ajax Functions
        //-Get Orders To Pick
    function GetOrdersToPickAjax(batchAmount) {
        $.ajax({
            type: "GET",
            url: "/Picking/GetOrdersToPick",
            data: { numberOfOrders: batchAmount },
            success: function (result) {
                if (result.booleanError == false) {
                    AddPickLocationsToHtml(result.mergedLocations);

                    //-Testing
                    barcodeToScan = result.sortedPickLocations[0].productBarcode;
                    orderToPickList = result.sortedPickLocations;
                    currentOrderToPick = orderToPickList[0];
                    //console.log(currentOrderToPick);

                    $(".pickSite-itemsToPick-footer-orders-span").text(result.ordersToPick);
                    $(".pickSite-itemsToPick-footer-items-span").text(result.itemsToPick);
                    //

                    // HUSK LOADING!
                    console.log("Start Picking");
                    pickBatchAmountOverlay.css("display", "none");
                    itemsToPickOverlay.css("display", "block");
                    pickToteAmountIsRunning = false;
                    itemsToPickIsRunning = true;
                }
                else {
                    console.log(result.msg);
                    alert(result.msg);
                }
            },
            error: function (req, status, error) {
                console.log(status);
                console.log(req);
                console.log(error);
                alert(status);
            }
        });
    }

        //-Get Totes
    function GetAllTotesAjax() {
        $.ajax({
            type: "GET",
            url: "/Picking/GetAllTotes",
            success: function (result) {
                if (result.booleanError == false) {
                    // HUSK LOADING
                    AddTotesToHtml(result.totes);
                }
                else {
                    console.log(result.msg);
                    alert(result.msg);
                }
            },
            error: function (req, status, error) {
                console.log(status);
                console.log(req);
                console.log(error);
                alert(status);
            }
        });
    }

        //-CheckTote
    function GetToteAjax(scanned_barcode) {
        $.ajax({
            type: "GET",
            url: "/Picking/GetTote",
            data: { scannedBarcode: scanned_barcode },
            success: function (result) {
                if (result.booleanError == false) {
                    selectedTote = result.tote;
                    console.log(selectedTote);

                    // HUSK LOADING

                    PickIntoToteEditHtml(false);

                    //-Testing
                    toteToPickIsRunning = false;
                    pickIntoToteIsRunning = true;
                    pickOrScanToteOverlay.css("display", "none");
                    pickIntoToteOverlay.css("display", "block");
                }
                else {
                    console.log(result.msg);
                    alert(result.msg);
                }
            },
            error: function (req, status, error) {
                console.log(status);
                console.log(req);
                console.log(error);
                alert(status);
            }
        });
    }

</script>
}