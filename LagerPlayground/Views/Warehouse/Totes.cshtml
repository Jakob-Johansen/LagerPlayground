@inject Microsoft.AspNetCore.Antiforgery.IAntiforgery Xsrf

@model IEnumerable<LagerPlayground.Models.Tote>

@functions {
    public string GetAntiXsrfRequestToken()
    {
        return Xsrf.GetAndStoreTokens(Context).RequestToken;
    }
}

@{
    ViewData["Title"] = "Totes";
}

<h2>Totes</h2>

<div class="tote-create-btn-container">
    <a class="tote-create-btn">Create Tote</a>
</div>

<div class="totes-navbar-contianer">
    <div class="totes-navbar-float">
        <label class="totes-navbar-label">Vis </label>
        <select class="totes-navbar-select">
            <option>10</option>
        </select>
        <label class="totes-navbar-label"> linjer</label>
    </div>
    <div class="totes-navbar-float">
        <div class="totes-navbar-search-container">
            <label class="totes-navbar-label">Søg: </label>
            <input class="background-dark" type="text" />
        </div>
    </div>
    <div class="clearBoth"></div>
</div>

<table class="table tote-table">
    <thead>
        <tr>
            <th></th>
            <th>
                @Html.DisplayNameFor(model => model.Name)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Barcode)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Created)
            </th>
        </tr>
    </thead>
    <tbody>
        @foreach (var item in Model)
        {
            <tr>
                <td>(Print-barcode)</td>
                <td>@Html.DisplayFor(modelItem => item.Name)</td>
                <td>@Html.DisplayFor(modelItem => item.Barcode)</td>
                <td>@item.Created.ToShortDateString()</td>
            </tr>
        }
    </tbody>
</table>

<div class="tote-overlay-overall-container">
    <div class="tote-overlay-container">
        <div class="tote-overlay-nav-overall-container">
            <div class="tote-overlay-nav-container">
                <p>Add Tote</p>
            </div>
            <div class="tote-overlay-nav-container">
                <span class="material-icons tote-overlay-nav-close-btn">close</span>
            </div>
            <div class="clearBoth"></div>
        </div>

        <div class="tote-overlay-form-overall-container">

            <div class="tote-overlay-form-container">
                <div class="tote-overlay-form-small-float">
                    <p>Navn*</p>
                </div>
                <div class="tote-overlay-form-big-float">
                    <input class="tote-overlay-name-input background-dark" type="text" />
                    <span class="tote-overlay-name-input-error text-danger"></span>
                </div>
                <div class="clearBoth"></div>
            </div>

            <div class="tote-overlay-form-container">
                <div class="tote-overlay-form-small-float">
                    <p>Quantity*</p>
                </div>
                <div class="tote-overlay-form-big-float">
                    <input class="tote-overlay-quantity-input background-dark" type="number" />
                    <span class="tote-overlay-name-quantity-error text-danger"></span>
                </div>
                <div class="clearBoth"></div>
            </div>

            <div class="tote-overlay-form-container">
                <div class="tote-overlay-form-small-float">
                    <p>Print*</p>
                </div>
                <div class="tote-overlay-form-big-float">
                    <input class="tote-overlay-print-input background-dark" type="checkbox" />
                </div>
                <div class="clearBoth"></div>
            </div>

            <div class="clearBoth"></div>
        </div>

        <div class="tote-overlay-btns-overall-container">
            <div class="loader tote-overlay-loader"></div>
            
            <div class="tote-overlay-btns-container tote-overlay-btns-container-cancel">
                <a class="tote-overlay-btn-cancel tote-overlay-nav-close-btn">Cancel</a>
            </div>
            <div class="tote-overlay-btns-container tote-overlay-btns-container-add">
                <a class="tote-overlay-btn-add">Add</a>
            </div>

            <div class="clearBoth"></div>
        </div>

    </div>
</div>

@*<svg class="barcode1"></svg>*@

@section Scripts {
<script>
    //$(".barcode1").JsBarcode("JSoft-BOKS-1", {
    //    format: "CODE128",
    //});

    const btnContainer = $(".tote-overlay-btns-container");
    const openBtn = $(".tote-create-btn");
    const closeBtn = $(".tote-overlay-nav-close-btn");
    const addBtn = $(".tote-overlay-btn-add");

    const overlayContainer = $(".tote-overlay-overall-container");

    const nameInput = $(".tote-overlay-name-input");
    const quantityInput = $(".tote-overlay-quantity-input");
    const printcheckboxInput = $(".tote-overlay-print-input");

    const nameInputError = $(".tote-overlay-name-input-error");
    const quantityInputError = $(".tote-overlay-name-quantity-error");

    const loader = $(".loader");

    let loadingIsRunning = false;
    let ajaxResult = false;

    let nameI;
    let quantity;
    let printInput = false;
    
    let errorBoolean = false; 

    openBtn.click(function () {
        overlayContainer.css("display", "block");
    });

    closeBtn.click(function () {
        overlayContainer.css("display", "none");
        nameInputError.text("");
        quantityInputError.text("");
    });

    addBtn.click(function () {
        ValidateInputs();
    });

    // Timeout/delay functions
    function loadingTimeout() {
        setTimeout(function () {
            if (ajaxResult == false) {
                loadingIsRunning = true;
                btnContainer.css("display", "none");
                loader.css("display", "block");
            }
        }, 20);
    }

    function ValidateInputs() {
        nameI = nameInput.val();
        quantity = quantityInput.val();
        errorBoolean = false;
        ajaxResult = false;

        if (nameI == "" || nameI == " ") {
            nameInputError.text("The field can't be empty!");
            errorBoolean = true
        }
        else {
            nameInputError.text("");
        }

        if (quantity == "" || quantity == " " || quantity < 1) {
            quantityInputError.text("The field can't be empty or 0!");
            errorBoolean = true
        }
        else {
            quantityInputError.text("");
        }

        if (printcheckboxInput.is(":checked")) {
            printInput = true;
        }
        else {
            printInput = false;
        }

        if (errorBoolean == true) {
            return;
        }

        loadingTimeout();

        ajaxPost(nameI, quantity, printInput);
    }

    function ajaxPost(nameI, quantityI, printI) {
    $.ajax({
        type: "POST",
        url: "/Warehouse/CreateTote",
        headers: { "RequestVerificationToken": "@GetAntiXsrfRequestToken()" },
        data: { toteName: nameI, quantity: quantityI, printBool: printI },
        success: function (result) {
            loadingIsRunning = false;
            ajaxResult = true;
            loader.css("display", "none");

            if (result.errorBoolean == false) {
                if (printInput == true) {
                    window.open('/Pdf/Barcode.pdf', '_blank');
                }
                location.reload();
            }
            else {
                if (result.exceptionError == true) {
                    console.log("Ex");
                    console.log(result.errorMsg);
                }
                else {
                    console.log(result.errorMsg);
                }
            }
        },
        error: function (req, status, error) {
            console.log(status);
        }
    });
}
</script>
}